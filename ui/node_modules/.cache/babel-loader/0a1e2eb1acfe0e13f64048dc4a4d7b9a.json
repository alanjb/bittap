{"ast":null,"code":"import _objectSpread from \"/Users/alanboyce/dev/bittap/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _temp,\n    _jsxFileName = \"/Users/alanboyce/dev/bittap/ui/src/components/auth/Register.jsx\";\n\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { Button, Container, Form, FormGroup, Input } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { isEmail, isPassword, isPasswordMatch } from '../../validation/index';\nimport OktaAuth from '@okta/okta-auth-js';\nimport { withAuth } from '@okta/okta-react';\nimport config from '../../app.config';\nexport default withAuth((_temp = class Register extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      //www.pluralsight.com/guides/handling-multiple-inputs-with-single-onchange-handler-react\n      const value = event.target.value;\n      const name = event.target.name;\n      let validation;\n      this.setState(_objectSpread({}, this.state, {\n        [event.target.name]: value //setting the email state to whatever the user has inputted \n\n      })); // console.log(event.target.name + \":\" + event.target.value);\n\n      if (name === 'email') {\n        const isEmailInputValid = this.state.isEmailInputValid;\n        validation = isEmail(value); //calls validation email module\n        // this.handleValidateEmailRegister(isEmailValid); //pass into below function current state\n\n        console.log(validation); // this.handleValidationText(name, validation);\n\n        if (validation === true && isEmailInputValid === false) {\n          // this is async\n          this.setState({\n            isEmailInputValid: true\n          }, function () {\n            this.handleValidationText(this.state);\n          }.bind(this));\n        }\n\n        if (validation === false && isEmailInputValid === true) {\n          // this is async\n          this.setState({\n            isEmailInputValid: false\n          }, function () {\n            this.handleValidationText(this.state);\n          }.bind(this));\n        }\n      } else if (name === 'password') {\n        const isPasswordInputValid = this.state.isPasswordInputValid;\n        validation = isPassword(value); //calls validation email module\n        // this.handleValidateEmailRegister(isEmailValid); //pass into below function current state\n\n        console.log(validation); // this.handleValidationText(name, validation);\n\n        if (validation === true && isPasswordInputValid === false) {\n          // this is async\n          this.setState({\n            isPasswordInputValid: true\n          }, function () {\n            this.handleValidationText(this.state);\n          }.bind(this));\n        }\n\n        if (validation === false && isPasswordInputValid === true) {\n          // this is async\n          this.setState({\n            isPasswordInputValid: false\n          }, function () {\n            this.handleValidationText(this.state);\n          }.bind(this));\n        }\n      } else if (name === 'confirmPassword') {\n        const _this$state = this.state,\n              isPasswordInputValid = _this$state.isPasswordInputValid,\n              isPasswordConfirmationMatch = _this$state.isPasswordConfirmationMatch;\n        validation = isPassword(value, isPasswordInputValid); //calls validation email module\n        // this.handleValidateEmailRegister(isEmailValid); //pass into below function current state\n        // console.log(validation);\n        // this.handleValidationText(name, validation);\n\n        if (validation === true && isPasswordConfirmationMatch === false) {\n          // this is async\n          this.setState({\n            isPasswordConfirmationMatch: true\n          }, function () {\n            this.handleValidationText(this.state);\n          }.bind(this));\n        }\n\n        if (validation === false && isPasswordConfirmationMatch === true) {\n          // this is async\n          this.setState({\n            isPasswordConfirmationMatch: false\n          }, function () {\n            this.handleValidationText(this.state);\n          }.bind(this));\n        }\n      }\n    };\n\n    this.handleValidationText = () => {\n      let validationTextClassesArray = [\"validation-text \", \"validation-text removeEmailValidation\", \"validation-text removePasswordValidation\", \"validation-text removePasswordConfirmValidation\"];\n      return validationTextClassesArray;\n    };\n\n    this.handleEnableSubmitButton = () => {\n      const _this$state2 = this.state,\n            isEmailInputValid = _this$state2.isEmailInputValid,\n            isPasswordInputValid = _this$state2.isPasswordInputValid,\n            isPasswordConfirmationMatch = _this$state2.isPasswordConfirmationMatch;\n\n      if (isEmailInputValid && isPasswordInputValid && isPasswordConfirmationMatch) {\n        console.log(); //enable submit button if all validations pass\n\n        document.getElementById(\"register-button\").removeAttribute(\"disabled\");\n      }\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // create a new user object \n\n      const newUser = {\n        firstName: this.state.firstName,\n        lastName: this.state.lastName,\n        email: this.state.email,\n        password: this.state.password,\n        confirmPassword: this.state.confirmPassword\n      };\n      axios.post('http://localhost:8080/register', newUser, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res => {\n        console.log(res);\n        console.log(res.data);\n      }).catch(function (error) {\n        console.error(\"test\");\n        console.error(error);\n      });\n    };\n\n    this.state = {\n      isSubmitButtonEnabled: false,\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      isEmailInputValid: false,\n      isPasswordInputValid: false,\n      isPasswordConfirmationMatch: false,\n      sessionToken: null\n    };\n    this.oktaAuth = new OktaAuth({\n      url: config.url\n    });\n  }\n\n  render() {\n    const _this$state3 = this.state,\n          firstName = _this$state3.firstName,\n          lastName = _this$state3.lastName,\n          password = _this$state3.password,\n          email = _this$state3.email,\n          isEmailInputValid = _this$state3.isEmailInputValid,\n          isPasswordInputValid = _this$state3.isPasswordInputValid,\n          isPasswordConfirmationMatch = _this$state3.isPasswordConfirmationMatch;\n    let validationTextClassesArray = this.handleValidationText();\n    let validationEmailTextClasses = validationTextClassesArray[0];\n    let validationPasswordTextClasses = validationTextClassesArray[0];\n    let validationPasswordConfirmTextClasses = validationTextClassesArray[0];\n    console.log(validationPasswordConfirmTextClasses);\n\n    if (isEmailInputValid) {\n      validationEmailTextClasses = validationTextClassesArray[1];\n    }\n\n    if (isPasswordInputValid) {\n      validationPasswordTextClasses = validationTextClassesArray[2];\n    }\n\n    if (!isPasswordConfirmationMatch) {\n      validationPasswordConfirmTextClasses = validationTextClassesArray[0];\n    } else {\n      validationPasswordConfirmTextClasses = validationTextClassesArray[3];\n    }\n\n    if (isEmailInputValid && isPasswordInputValid && isPasswordConfirmationMatch) {\n      this.handleEnableSubmitButton();\n    }\n\n    return React.createElement(\"div\", {\n      className: \"Register-Component\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Bittap\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"text\",\n      name: \"firstName\",\n      id: \"firstName\",\n      value: firstName,\n      onChange: e => this.handleChange(e),\n      placeholder: \"First Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"text\",\n      name: \"lastName\",\n      id: \"lastName\",\n      value: lastName,\n      onChange: e => this.handleChange(e),\n      placeholder: \"Last Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"email\",\n      name: \"email\",\n      id: \"email\",\n      value: email,\n      onChange: e => this.handleChange(e),\n      placeholder: \"Email Address\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: validationEmailTextClasses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"Enter a valid email\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"password\",\n      name: \"password\",\n      id: \"password\",\n      value: password,\n      onChange: e => this.handleChange(e),\n      placeholder: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: validationPasswordTextClasses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Enter a password with at least 5 characters and one number\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"password\",\n      name: \"confirmPassword\",\n      id: \"confirmPassword\",\n      onChange: e => this.handleChange(e),\n      placeholder: \"Confirm Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: validationPasswordConfirmTextClasses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"Enter a password with at least 5 characters and one number\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    })), React.createElement(Button, {\n      className: \"register-button\",\n      id: \"register-button\",\n      color: \"primary\",\n      label: \"Register\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"Register\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"Already on Bittap? \", React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"Sign in\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }))));\n  }\n\n}, _temp));","map":{"version":3,"sources":["/Users/alanboyce/dev/bittap/ui/src/components/auth/Register.jsx"],"names":["React","Link","axios","Button","Container","Form","FormGroup","Input","connect","isEmail","isPassword","isPasswordMatch","OktaAuth","withAuth","config","Register","Component","constructor","props","handleChange","event","value","target","name","validation","setState","state","isEmailInputValid","console","log","handleValidationText","bind","isPasswordInputValid","isPasswordConfirmationMatch","validationTextClassesArray","handleEnableSubmitButton","document","getElementById","removeAttribute","handleSubmit","preventDefault","newUser","firstName","lastName","email","password","confirmPassword","post","headers","then","res","data","catch","error","isSubmitButtonEnabled","sessionToken","oktaAuth","url","render","validationEmailTextClasses","validationPasswordTextClasses","validationPasswordConfirmTextClasses","e"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport axios from 'axios';\nimport {Button, Container, Form, FormGroup, Input} from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { isEmail, isPassword, isPasswordMatch}  from '../../validation/index';\nimport OktaAuth from '@okta/okta-auth-js';\nimport { withAuth } from '@okta/okta-react';\nimport config from '../../app.config';\n\nexport default withAuth(\n  class Register extends React.Component{\n    constructor(props) {\n      super(props);\n      this.state = {\n        isSubmitButtonEnabled: false,\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        isEmailInputValid: false,\n        isPasswordInputValid: false, \n        isPasswordConfirmationMatch: false,\n        sessionToken: null\n      };\n\n      this.oktaAuth = new OktaAuth({ url: config.url });\n    }\n\n    handleChange = (event) => {\n      //www.pluralsight.com/guides/handling-multiple-inputs-with-single-onchange-handler-react\n      const value = event.target.value;\n      const name= event.target.name;\n      let validation;\n      this.setState({\n        ...this.state,\n        [event.target.name]: value //setting the email state to whatever the user has inputted \n      });\n      // console.log(event.target.name + \":\" + event.target.value);\n      if(name === 'email'){\n        const {isEmailInputValid} = this.state;\n        validation = isEmail(value); //calls validation email module\n        // this.handleValidateEmailRegister(isEmailValid); //pass into below function current state\n        console.log(validation);\n        // this.handleValidationText(name, validation);\n        if(validation===true && isEmailInputValid===false){\n          // this is async\n          this.setState({\n            isEmailInputValid: true\n          }, function () {\n            this.handleValidationText(this.state)}.bind(this)); \n        }\n        if(validation===false && isEmailInputValid===true){\n          // this is async\n          this.setState({\n            isEmailInputValid: false\n          }, function () {\n            this.handleValidationText(this.state)}.bind(this)); \n        }\n      } \n      else if(name === 'password'){\n        const { isPasswordInputValid } = this.state;\n        validation = isPassword(value); //calls validation email module\n        // this.handleValidateEmailRegister(isEmailValid); //pass into below function current state\n        console.log(validation);\n        // this.handleValidationText(name, validation);\n        if(validation===true && isPasswordInputValid===false){\n          // this is async\n          this.setState({\n            isPasswordInputValid: true\n          }, function () {\n            this.handleValidationText(this.state)}.bind(this)); \n        }\n        if(validation===false && isPasswordInputValid===true){\n          // this is async\n          this.setState({\n            isPasswordInputValid: false\n          }, function () {\n            this.handleValidationText(this.state)}.bind(this)); \n        }\n      } \n      else if(name === 'confirmPassword'){\n        const { isPasswordInputValid, isPasswordConfirmationMatch } = this.state;\n        validation = isPassword(value, isPasswordInputValid); //calls validation email module\n        // this.handleValidateEmailRegister(isEmailValid); //pass into below function current state\n        // console.log(validation);\n        // this.handleValidationText(name, validation);\n        if(validation===true && isPasswordConfirmationMatch===false){\n          // this is async\n          this.setState({\n            isPasswordConfirmationMatch: true\n          }, function () {\n            this.handleValidationText(this.state)}.bind(this)); \n        }\n        if(validation===false && isPasswordConfirmationMatch===true){\n          // this is async\n          this.setState({\n            isPasswordConfirmationMatch: false\n          }, function () {\n            this.handleValidationText(this.state)}.bind(this)); \n        }\n      } \n    }\n\n    handleValidationText = () => {\n      let validationTextClassesArray = \n        [\n          \"validation-text \", \n          \"validation-text removeEmailValidation\", \n          \"validation-text removePasswordValidation\", \n          \"validation-text removePasswordConfirmValidation\", \n        ]; \n      return validationTextClassesArray;\n    }\n\n    handleEnableSubmitButton = () => {\n      const { isEmailInputValid,  isPasswordInputValid, isPasswordConfirmationMatch} = this.state;\n      if(isEmailInputValid && isPasswordInputValid && isPasswordConfirmationMatch){\n        console.log()\n        //enable submit button if all validations pass\n        document.getElementById(\"register-button\").removeAttribute(\"disabled\");\n      } \n    }\n\n    handleSubmit = async(event) => {\n      event.preventDefault();\n      // create a new user object \n      const newUser = {\n        firstName: this.state.firstName,\n        lastName: this.state.lastName,\n        email: this.state.email,\n        password: this.state.password,\n        confirmPassword: this.state.confirmPassword\n      }\n      axios.post('http://localhost:8080/register', newUser, { headers: { 'Content-Type': 'application/json', }})\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n      })\n      .catch(function (error) {\n        console.error(\"test\");\n        console.error(error);\n      });\n    }\n\n    render() {\n      const {firstName, lastName, password, email, isEmailInputValid, isPasswordInputValid, isPasswordConfirmationMatch} = this.state;\n      let validationTextClassesArray = this.handleValidationText();\n      let validationEmailTextClasses = validationTextClassesArray[0];\n      let validationPasswordTextClasses = validationTextClassesArray[0]\n      let validationPasswordConfirmTextClasses = validationTextClassesArray[0];\n\n      console.log(validationPasswordConfirmTextClasses)\n\n      if(isEmailInputValid){\n        validationEmailTextClasses = validationTextClassesArray[1];\n      } \n\n      if(isPasswordInputValid){\n        validationPasswordTextClasses = validationTextClassesArray[2];\n      } \n      \n      if(!isPasswordConfirmationMatch){\n        validationPasswordConfirmTextClasses = validationTextClassesArray[0];\n      } else {\n        validationPasswordConfirmTextClasses = validationTextClassesArray[3];\n      }\n\n      if(isEmailInputValid && isPasswordInputValid && isPasswordConfirmationMatch){\n        this.handleEnableSubmitButton();\n      }\n\n      return (\n      <div className=\"Register-Component\">\n        <Container>\n          <Form onSubmit={this.handleSubmit}>\n            <br/>\n            <h1 className=\"header\">Bittap</h1>\n            <br></br>\n            <FormGroup>\n              <Input type=\"text\" name=\"firstName\" id=\"firstName\" value={firstName} onChange={(e) => this.handleChange(e)} placeholder=\"First Name\"/>\n              <br></br>\n            </FormGroup>\n            <FormGroup>\n              <Input type=\"text\" name=\"lastName\" id=\"lastName\" value={lastName} onChange={(e) => this.handleChange(e)} placeholder=\"Last Name\"/>\n              <br></br>\n            </FormGroup>\n            <FormGroup>\n              <Input type=\"email\" name=\"email\" id=\"email\" value={email} onChange={(e) => this.handleChange(e)} placeholder=\"Email Address\"/>\n              <p className={validationEmailTextClasses}>Enter a valid email</p>\n              <br></br>\n            </FormGroup>\n            <FormGroup>\n              <Input type=\"password\" name=\"password\" id=\"password\" value={password} onChange={(e) => this.handleChange(e)} placeholder=\"Password\"/>\n              <p className={validationPasswordTextClasses}>Enter a password with at least 5 characters and one number</p>\n              <br></br>\n            </FormGroup>\n            <FormGroup>\n              <Input type=\"password\" name=\"confirmPassword\" id=\"confirmPassword\" onChange={(e) => this.handleChange(e)} placeholder=\"Confirm Password\"/>\n              <p className={validationPasswordConfirmTextClasses}>Enter a password with at least 5 characters and one number</p>\n              <br></br>\n            </FormGroup>\n            <Button className=\"register-button\" id=\"register-button\" color=\"primary\" label=\"Register\" disabled>Register</Button>\n            <br/>\n            <br></br>\n              <p className=\"text\">Already on Bittap? <Link to=\"/\">Sign in</Link></p>\n              <br/>\n            <br/>\n            <br/>\n            <br/>\n          </Form>\n        </Container>\n      </div>);\n    }\n  }\n)"]},"metadata":{},"sourceType":"module"}