{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nvar util = require('./util');\n\nfunction verifyToken(idToken, key) {\n  key = util.clone(key);\n  var format = 'jwk';\n  var algo = {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  };\n  var extractable = true;\n  var usages = ['verify']; // https://connect.microsoft.com/IE/feedback/details/2242108/webcryptoapi-importing-jwk-with-use-field-fails\n  // This is a metadata tag that specifies the intent of how the key should be used.\n  // It's not necessary to properly verify the jwt's signature.\n\n  delete key.use;\n  return crypto.subtle.importKey(format, key, algo, extractable, usages).then(function (cryptoKey) {\n    var jwt = idToken.split('.');\n    var payload = util.stringToBuffer(jwt[0] + '.' + jwt[1]);\n    var b64Signature = util.base64UrlDecode(jwt[2]);\n    var signature = util.stringToBuffer(b64Signature);\n    return crypto.subtle.verify(algo, cryptoKey, signature, payload);\n  });\n}\n\nmodule.exports = {\n  verifyToken: verifyToken\n};","map":{"version":3,"sources":["/Users/alanboyce/dev/bittap/ui/node_modules/@okta/okta-auth-js/lib/crypto.js"],"names":["util","require","verifyToken","idToken","key","clone","format","algo","name","hash","extractable","usages","use","crypto","subtle","importKey","then","cryptoKey","jwt","split","payload","stringToBuffer","b64Signature","base64UrlDecode","signature","verify","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAYA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;;AAEA,SAASC,WAAT,CAAqBC,OAArB,EAA8BC,GAA9B,EAAmC;AACjCA,EAAAA,GAAG,GAAGJ,IAAI,CAACK,KAAL,CAAWD,GAAX,CAAN;AAEA,MAAIE,MAAM,GAAG,KAAb;AACA,MAAIC,IAAI,GAAG;AACTC,IAAAA,IAAI,EAAE,mBADG;AAETC,IAAAA,IAAI,EAAE;AAAED,MAAAA,IAAI,EAAE;AAAR;AAFG,GAAX;AAIA,MAAIE,WAAW,GAAG,IAAlB;AACA,MAAIC,MAAM,GAAG,CAAC,QAAD,CAAb,CATiC,CAWjC;AACA;AACA;;AACA,SAAOP,GAAG,CAACQ,GAAX;AAEA,SAAOC,MAAM,CAACC,MAAP,CAAcC,SAAd,CACLT,MADK,EAELF,GAFK,EAGLG,IAHK,EAILG,WAJK,EAKLC,MALK,EAONK,IAPM,CAOD,UAASC,SAAT,EAAoB;AACxB,QAAIC,GAAG,GAAGf,OAAO,CAACgB,KAAR,CAAc,GAAd,CAAV;AACA,QAAIC,OAAO,GAAGpB,IAAI,CAACqB,cAAL,CAAoBH,GAAG,CAAC,CAAD,CAAH,GAAS,GAAT,GAAeA,GAAG,CAAC,CAAD,CAAtC,CAAd;AACA,QAAII,YAAY,GAAGtB,IAAI,CAACuB,eAAL,CAAqBL,GAAG,CAAC,CAAD,CAAxB,CAAnB;AACA,QAAIM,SAAS,GAAGxB,IAAI,CAACqB,cAAL,CAAoBC,YAApB,CAAhB;AAEA,WAAOT,MAAM,CAACC,MAAP,CAAcW,MAAd,CACLlB,IADK,EAELU,SAFK,EAGLO,SAHK,EAILJ,OAJK,CAAP;AAMD,GAnBM,CAAP;AAoBD;;AAEDM,MAAM,CAACC,OAAP,GAAiB;AACfzB,EAAAA,WAAW,EAAEA;AADE,CAAjB","sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nvar util = require('./util');\n\nfunction verifyToken(idToken, key) {\n  key = util.clone(key);\n\n  var format = 'jwk';\n  var algo = {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: { name: 'SHA-256' }\n  };\n  var extractable = true;\n  var usages = ['verify'];\n\n  // https://connect.microsoft.com/IE/feedback/details/2242108/webcryptoapi-importing-jwk-with-use-field-fails\n  // This is a metadata tag that specifies the intent of how the key should be used.\n  // It's not necessary to properly verify the jwt's signature.\n  delete key.use;\n\n  return crypto.subtle.importKey(\n    format,\n    key,\n    algo,\n    extractable,\n    usages\n  )\n  .then(function(cryptoKey) {\n    var jwt = idToken.split('.');\n    var payload = util.stringToBuffer(jwt[0] + '.' + jwt[1]);\n    var b64Signature = util.base64UrlDecode(jwt[2]);\n    var signature = util.stringToBuffer(b64Signature);\n\n    return crypto.subtle.verify(\n      algo,\n      cryptoKey,\n      signature,\n      payload\n    );\n  });\n}\n\nmodule.exports = {\n  verifyToken: verifyToken\n};\n"]},"metadata":{},"sourceType":"script"}