{"ast":null,"code":"var util = require('./util');\n\nfunction SdkClock(localOffset) {\n  // Calculated local clock offset from server time (in milliseconds). Can be positive or negative.\n  this.localOffset = parseInt(localOffset || 0);\n}\n\nutil.extend(SdkClock.prototype, {\n  // Return the current time (in seconds)\n  now: function () {\n    var now = (Date.now() + this.localOffset) / 1000;\n    return now;\n  }\n}); // factory method. Create an instance of a clock from current context.\n\nSdkClock.create = function ()\n/* sdk, options */\n{\n  // TODO: calculate localOffset\n  var localOffset = 0;\n  return new SdkClock(localOffset);\n};\n\nmodule.exports = SdkClock;","map":{"version":3,"sources":["/app/node_modules/@okta/okta-auth-js/lib/clock.js"],"names":["util","require","SdkClock","localOffset","parseInt","extend","prototype","now","Date","create","module","exports"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;;AAEA,SAASC,QAAT,CAAkBC,WAAlB,EAA+B;AAC7B;AACA,OAAKA,WAAL,GAAmBC,QAAQ,CAACD,WAAW,IAAI,CAAhB,CAA3B;AACD;;AAEDH,IAAI,CAACK,MAAL,CAAYH,QAAQ,CAACI,SAArB,EAAgC;AAC9B;AACAC,EAAAA,GAAG,EAAE,YAAW;AACd,QAAIA,GAAG,GAAG,CAACC,IAAI,CAACD,GAAL,KAAa,KAAKJ,WAAnB,IAAkC,IAA5C;AACA,WAAOI,GAAP;AACD;AAL6B,CAAhC,E,CAQA;;AACAL,QAAQ,CAACO,MAAT,GAAkB;AAAS;AAAoB;AAC7C;AACA,MAAIN,WAAW,GAAG,CAAlB;AACA,SAAO,IAAID,QAAJ,CAAaC,WAAb,CAAP;AACD,CAJD;;AAMAO,MAAM,CAACC,OAAP,GAAiBT,QAAjB","sourcesContent":["var util = require('./util');\n\nfunction SdkClock(localOffset) {\n  // Calculated local clock offset from server time (in milliseconds). Can be positive or negative.\n  this.localOffset = parseInt(localOffset || 0);\n}\n\nutil.extend(SdkClock.prototype, {\n  // Return the current time (in seconds)\n  now: function() {\n    var now = (Date.now() + this.localOffset) / 1000;\n    return now;\n  }\n});\n\n// factory method. Create an instance of a clock from current context.\nSdkClock.create = function(/* sdk, options */) {\n  // TODO: calculate localOffset\n  var localOffset = 0;\n  return new SdkClock(localOffset);\n};\n\nmodule.exports = SdkClock;\n"]},"metadata":{},"sourceType":"script"}