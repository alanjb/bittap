{"ast":null,"code":"// vim:ts=4:sts=4:sw=4:\n\n/*!\n *\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n(function (definition) {\n  \"use strict\"; // This file will function properly as a <script> tag, or a module\n  // using CommonJS and NodeJS or RequireJS module formats.  In\n  // Common/Node/RequireJS, the module exports the Q API and when\n  // executed as a simple <script>, it creates a Q global instead.\n  // Montage Require\n\n  if (typeof bootstrap === \"function\") {\n    bootstrap(\"promise\", definition); // CommonJS\n  } else if (typeof exports === \"object\" && typeof module === \"object\") {\n    module.exports = definition(); // RequireJS\n  } else if (typeof define === \"function\" && define.amd) {\n    define(definition); // SES (Secure EcmaScript)\n  } else if (typeof ses !== \"undefined\") {\n    if (!ses.ok()) {\n      return;\n    } else {\n      ses.makeQ = definition;\n    } // <script>\n\n  } else if (typeof window !== \"undefined\" || typeof self !== \"undefined\") {\n    // Prefer window over self for add-on scripts. Use self for\n    // non-windowed contexts.\n    var global = typeof window !== \"undefined\" ? window : self; // Get the `window` object, save the previous Q global\n    // and initialize Q as a global.\n\n    var previousQ = global.Q;\n    global.Q = definition(); // Add a noConflict function so Q can be removed from the\n    // global namespace.\n\n    global.Q.noConflict = function () {\n      global.Q = previousQ;\n      return this;\n    };\n  } else {\n    throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n  }\n})(function () {\n  \"use strict\";\n\n  var hasStacks = false;\n\n  try {\n    throw new Error();\n  } catch (e) {\n    hasStacks = !!e.stack;\n  } // All code after this point will be filtered from stack traces reported\n  // by Q.\n\n\n  var qStartingLine = captureLine();\n  var qFileName; // shims\n  // used for fallback in \"allResolved\"\n\n  var noop = function () {}; // Use the fastest possible means to execute a task in a future turn\n  // of the event loop.\n\n\n  var nextTick = function () {\n    // linked list of tasks (single, with head node)\n    var head = {\n      task: void 0,\n      next: null\n    };\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false; // queue for late tasks, used by unhandled rejection tracking\n\n    var laterQueue = [];\n\n    function flush() {\n      /* jshint loopfunc: true */\n      var task, domain;\n\n      while (head.next) {\n        head = head.next;\n        task = head.task;\n        head.task = void 0;\n        domain = head.domain;\n\n        if (domain) {\n          head.domain = void 0;\n          domain.enter();\n        }\n\n        runSingle(task, domain);\n      }\n\n      while (laterQueue.length) {\n        task = laterQueue.pop();\n        runSingle(task);\n      }\n\n      flushing = false;\n    } // runs a single function in the async queue\n\n\n    function runSingle(task, domain) {\n      try {\n        task();\n      } catch (e) {\n        if (isNodeJS) {\n          // In node, uncaught exceptions are considered fatal errors.\n          // Re-throw them synchronously to interrupt flushing!\n          // Ensure continuation if the uncaught exception is suppressed\n          // listening \"uncaughtException\" events (as domains does).\n          // Continue in next event to avoid tick recursion.\n          if (domain) {\n            domain.exit();\n          }\n\n          setTimeout(flush, 0);\n\n          if (domain) {\n            domain.enter();\n          }\n\n          throw e;\n        } else {\n          // In browsers, uncaught exceptions are not fatal.\n          // Re-throw them asynchronously to avoid slow-downs.\n          setTimeout(function () {\n            throw e;\n          }, 0);\n        }\n      }\n\n      if (domain) {\n        domain.exit();\n      }\n    }\n\n    nextTick = function (task) {\n      tail = tail.next = {\n        task: task,\n        domain: isNodeJS && process.domain,\n        next: null\n      };\n\n      if (!flushing) {\n        flushing = true;\n        requestTick();\n      }\n    };\n\n    if (typeof process === \"object\" && process.toString() === \"[object process]\" && process.nextTick) {\n      // Ensure Q is in a real Node environment, with a `process.nextTick`.\n      // To see through fake Node environments:\n      // * Mocha test runner - exposes a `process` global without a `nextTick`\n      // * Browserify - exposes a `process.nexTick` function that uses\n      //   `setTimeout`. In this case `setImmediate` is preferred because\n      //    it is faster. Browserify's `process.toString()` yields\n      //   \"[object Object]\", while in a real Node environment\n      //   `process.nextTick()` yields \"[object process]\".\n      isNodeJS = true;\n\n      requestTick = function () {\n        process.nextTick(flush);\n      };\n    } else if (typeof setImmediate === \"function\") {\n      // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n      if (typeof window !== \"undefined\") {\n        requestTick = setImmediate.bind(window, flush);\n      } else {\n        requestTick = function () {\n          setImmediate(flush);\n        };\n      }\n    } else if (typeof MessageChannel !== \"undefined\") {\n      // modern browsers\n      // http://www.nonblocking.io/2011/06/windownexttick.html\n      var channel = new MessageChannel(); // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n      // working message ports the first time a page loads.\n\n      channel.port1.onmessage = function () {\n        requestTick = requestPortTick;\n        channel.port1.onmessage = flush;\n        flush();\n      };\n\n      var requestPortTick = function () {\n        // Opera requires us to provide a message payload, regardless of\n        // whether we use it.\n        channel.port2.postMessage(0);\n      };\n\n      requestTick = function () {\n        setTimeout(flush, 0);\n        requestPortTick();\n      };\n    } else {\n      // old browsers\n      requestTick = function () {\n        setTimeout(flush, 0);\n      };\n    } // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n\n\n    nextTick.runAfter = function (task) {\n      laterQueue.push(task);\n\n      if (!flushing) {\n        flushing = true;\n        requestTick();\n      }\n    };\n\n    return nextTick;\n  }(); // Attempt to make generics safe in the face of downstream\n  // modifications.\n  // There is no situation where this is necessary.\n  // If you need a security guarantee, these primordials need to be\n  // deeply frozen anyway, and if you don’t need a security guarantee,\n  // this is just plain paranoid.\n  // However, this **might** have the nice side-effect of reducing the size of\n  // the minified code by reducing x.call() to merely x()\n  // See Mark Miller’s explanation of what this does.\n  // http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\n\n\n  var call = Function.call;\n\n  function uncurryThis(f) {\n    return function () {\n      return call.apply(f, arguments);\n    };\n  } // This is equivalent, but slower:\n  // uncurryThis = Function_bind.bind(Function_bind.call);\n  // http://jsperf.com/uncurrythis\n\n\n  var array_slice = uncurryThis(Array.prototype.slice);\n  var array_reduce = uncurryThis(Array.prototype.reduce || function (callback, basis) {\n    var index = 0,\n        length = this.length; // concerning the initial value, if one is not provided\n\n    if (arguments.length === 1) {\n      // seek to the first value in the array, accounting\n      // for the possibility that is is a sparse array\n      do {\n        if (index in this) {\n          basis = this[index++];\n          break;\n        }\n\n        if (++index >= length) {\n          throw new TypeError();\n        }\n      } while (1);\n    } // reduce\n\n\n    for (; index < length; index++) {\n      // account for the possibility that the array is sparse\n      if (index in this) {\n        basis = callback(basis, this[index], index);\n      }\n    }\n\n    return basis;\n  });\n  var array_indexOf = uncurryThis(Array.prototype.indexOf || function (value) {\n    // not a very good shim, but good enough for our one use of it\n    for (var i = 0; i < this.length; i++) {\n      if (this[i] === value) {\n        return i;\n      }\n    }\n\n    return -1;\n  });\n  var array_map = uncurryThis(Array.prototype.map || function (callback, thisp) {\n    var self = this;\n    var collect = [];\n    array_reduce(self, function (undefined, value, index) {\n      collect.push(callback.call(thisp, value, index, self));\n    }, void 0);\n    return collect;\n  });\n\n  var object_create = Object.create || function (prototype) {\n    function Type() {}\n\n    Type.prototype = prototype;\n    return new Type();\n  };\n\n  var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\n  var object_keys = Object.keys || function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      if (object_hasOwnProperty(object, key)) {\n        keys.push(key);\n      }\n    }\n\n    return keys;\n  };\n\n  var object_toString = uncurryThis(Object.prototype.toString);\n\n  function isObject(value) {\n    return value === Object(value);\n  } // generator related shims\n  // FIXME: Remove this function once ES6 generators are in SpiderMonkey.\n\n\n  function isStopIteration(exception) {\n    return object_toString(exception) === \"[object StopIteration]\" || exception instanceof QReturnValue;\n  } // FIXME: Remove this helper and Q.return once ES6 generators are in\n  // SpiderMonkey.\n\n\n  var QReturnValue;\n\n  if (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n  } else {\n    QReturnValue = function (value) {\n      this.value = value;\n    };\n  } // long stack traces\n\n\n  var STACK_JUMP_SEPARATOR = \"From previous event:\";\n\n  function makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks && promise.stack && typeof error === \"object\" && error !== null && error.stack && error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1) {\n      var stacks = [];\n\n      for (var p = promise; !!p; p = p.source) {\n        if (p.stack) {\n          stacks.unshift(p.stack);\n        }\n      }\n\n      stacks.unshift(error.stack);\n      var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n      error.stack = filterStackString(concatedStacks);\n    }\n  }\n\n  function filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n\n    for (var i = 0; i < lines.length; ++i) {\n      var line = lines[i];\n\n      if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n        desiredLines.push(line);\n      }\n    }\n\n    return desiredLines.join(\"\\n\");\n  }\n\n  function isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 || stackLine.indexOf(\"(node.js:\") !== -1;\n  }\n\n  function getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n\n    if (attempt1) {\n      return [attempt1[1], Number(attempt1[2])];\n    } // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n\n\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n\n    if (attempt2) {\n      return [attempt2[1], Number(attempt2[2])];\n    } // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n\n\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n\n    if (attempt3) {\n      return [attempt3[1], Number(attempt3[2])];\n    }\n  }\n\n  function isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n      return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n    return fileName === qFileName && lineNumber >= qStartingLine && lineNumber <= qEndingLine;\n  } // discover own file name and line number range for filtering stack\n  // traces\n\n\n  function captureLine() {\n    if (!hasStacks) {\n      return;\n    }\n\n    try {\n      throw new Error();\n    } catch (e) {\n      var lines = e.stack.split(\"\\n\");\n      var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n      var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n\n      if (!fileNameAndLineNumber) {\n        return;\n      }\n\n      qFileName = fileNameAndLineNumber[0];\n      return fileNameAndLineNumber[1];\n    }\n  }\n\n  function deprecate(callback, name, alternative) {\n    return function () {\n      if (typeof console !== \"undefined\" && typeof console.warn === \"function\") {\n        console.warn(name + \" is deprecated, use \" + alternative + \" instead.\", new Error(\"\").stack);\n      }\n\n      return callback.apply(callback, arguments);\n    };\n  } // end of shims\n  // beginning of real work\n\n  /**\n   * Constructs a promise for an immediate reference, passes promises through, or\n   * coerces promises from different systems.\n   * @param value immediate reference or promise\n   */\n\n\n  function Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n      return value;\n    } // assimilate thenables\n\n\n    if (isPromiseAlike(value)) {\n      return coerce(value);\n    } else {\n      return fulfill(value);\n    }\n  }\n\n  Q.resolve = Q;\n  /**\n   * Performs a task in a future turn of the event loop.\n   * @param {Function} task\n   */\n\n  Q.nextTick = nextTick;\n  /**\n   * Controls whether or not long stack traces will be on\n   */\n\n  Q.longStackSupport = false; // enable long stacks if Q_DEBUG is set\n\n  if (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n  }\n  /**\n   * Constructs a {promise, resolve, reject} object.\n   *\n   * `resolve` is a callback to invoke with a more resolved value for the\n   * promise. To fulfill the promise, invoke `resolve` with any value that is\n   * not a thenable. To reject the promise, invoke `resolve` with a rejected\n   * thenable, or invoke `reject` with the reason directly. To resolve the\n   * promise to another thenable, thus putting it in the same state, invoke\n   * `resolve` with that other thenable.\n   */\n\n\n  Q.defer = defer;\n\n  function defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [],\n        progressListeners = [],\n        resolvedPromise;\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n      var args = array_slice(arguments);\n\n      if (messages) {\n        messages.push(args);\n\n        if (op === \"when\" && operands[1]) {\n          // progress operand\n          progressListeners.push(operands[1]);\n        }\n      } else {\n        Q.nextTick(function () {\n          resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n        });\n      }\n    }; // XXX deprecated\n\n\n    promise.valueOf = function () {\n      if (messages) {\n        return promise;\n      }\n\n      var nearerValue = nearer(resolvedPromise);\n\n      if (isPromise(nearerValue)) {\n        resolvedPromise = nearerValue; // shorten chain\n      }\n\n      return nearerValue;\n    };\n\n    promise.inspect = function () {\n      if (!resolvedPromise) {\n        return {\n          state: \"pending\"\n        };\n      }\n\n      return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n      try {\n        throw new Error();\n      } catch (e) {\n        // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n        // accessor around; that causes memory leaks as per GH-111. Just\n        // reify the stack trace as a string ASAP.\n        //\n        // At the same time, cut off the first line; it's always just\n        // \"[object Promise]\\n\", as per the `toString`.\n        promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n      }\n    } // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n\n    function become(newPromise) {\n      resolvedPromise = newPromise;\n      promise.source = newPromise;\n      array_reduce(messages, function (undefined, message) {\n        Q.nextTick(function () {\n          newPromise.promiseDispatch.apply(newPromise, message);\n        });\n      }, void 0);\n      messages = void 0;\n      progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n\n    deferred.resolve = function (value) {\n      if (resolvedPromise) {\n        return;\n      }\n\n      become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n      if (resolvedPromise) {\n        return;\n      }\n\n      become(fulfill(value));\n    };\n\n    deferred.reject = function (reason) {\n      if (resolvedPromise) {\n        return;\n      }\n\n      become(reject(reason));\n    };\n\n    deferred.notify = function (progress) {\n      if (resolvedPromise) {\n        return;\n      }\n\n      array_reduce(progressListeners, function (undefined, progressListener) {\n        Q.nextTick(function () {\n          progressListener(progress);\n        });\n      }, void 0);\n    };\n\n    return deferred;\n  }\n  /**\n   * Creates a Node-style callback that will resolve or reject the deferred\n   * promise.\n   * @returns a nodeback\n   */\n\n\n  defer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n      if (error) {\n        self.reject(error);\n      } else if (arguments.length > 2) {\n        self.resolve(array_slice(arguments, 1));\n      } else {\n        self.resolve(value);\n      }\n    };\n  };\n  /**\n   * @param resolver {Function} a function that returns nothing and accepts\n   * the resolve, reject, and notify functions for a deferred.\n   * @returns a promise that may be resolved with the given resolve and reject\n   * functions, or rejected by a thrown exception in resolver\n   */\n\n\n  Q.Promise = promise; // ES6\n\n  Q.promise = promise;\n\n  function promise(resolver) {\n    if (typeof resolver !== \"function\") {\n      throw new TypeError(\"resolver must be a function.\");\n    }\n\n    var deferred = defer();\n\n    try {\n      resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n      deferred.reject(reason);\n    }\n\n    return deferred.promise;\n  }\n\n  promise.race = race; // ES6\n\n  promise.all = all; // ES6\n\n  promise.reject = reject; // ES6\n\n  promise.resolve = Q; // ES6\n  // XXX experimental.  This method is a way to denote that a local value is\n  // serializable and should be immediately dispatched to a remote upon request,\n  // instead of passing a reference.\n\n  Q.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n  };\n\n  Promise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n  };\n  /**\n   * If two promises eventually fulfill to the same value, promises that value,\n   * but otherwise rejects.\n   * @param x {Any*}\n   * @param y {Any*}\n   * @returns {Any*} a promise for x and y if they are the same, but a rejection\n   * otherwise.\n   *\n   */\n\n\n  Q.join = function (x, y) {\n    return Q(x).join(y);\n  };\n\n  Promise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n      if (x === y) {\n        // TODO: \"===\" should be Object.is or equiv\n        return x;\n      } else {\n        throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n      }\n    });\n  };\n  /**\n   * Returns a promise for the first of an array of promises to become settled.\n   * @param answers {Array[Any*]} promises to race\n   * @returns {Any*} the first promise to be settled\n   */\n\n\n  Q.race = race;\n\n  function race(answerPs) {\n    return promise(function (resolve, reject) {\n      // Switch to this once we can assume at least ES5\n      // answerPs.forEach(function (answerP) {\n      //     Q(answerP).then(resolve, reject);\n      // });\n      // Use this in the meantime\n      for (var i = 0, len = answerPs.length; i < len; i++) {\n        Q(answerPs[i]).then(resolve, reject);\n      }\n    });\n  }\n\n  Promise.prototype.race = function () {\n    return this.then(Q.race);\n  };\n  /**\n   * Constructs a Promise with a promise descriptor object and optional fallback\n   * function.  The descriptor contains methods like when(rejected), get(name),\n   * set(name, value), post(name, args), and delete(name), which all\n   * return either a value, a promise for a value, or a rejection.  The fallback\n   * accepts the operation name, a resolver, and any further arguments that would\n   * have been forwarded to the appropriate method above had a method been\n   * provided with the proper name.  The API makes no guarantees about the nature\n   * of the returned object, apart from that it is usable whereever promises are\n   * bought and sold.\n   */\n\n\n  Q.makePromise = Promise;\n\n  function Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n      fallback = function (op) {\n        return reject(new Error(\"Promise does not support operation: \" + op));\n      };\n    }\n\n    if (inspect === void 0) {\n      inspect = function () {\n        return {\n          state: \"unknown\"\n        };\n      };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n      var result;\n\n      try {\n        if (descriptor[op]) {\n          result = descriptor[op].apply(promise, args);\n        } else {\n          result = fallback.call(promise, op, args);\n        }\n      } catch (exception) {\n        result = reject(exception);\n      }\n\n      if (resolve) {\n        resolve(result);\n      }\n    };\n\n    promise.inspect = inspect; // XXX deprecated `valueOf` and `exception` support\n\n    if (inspect) {\n      var inspected = inspect();\n\n      if (inspected.state === \"rejected\") {\n        promise.exception = inspected.reason;\n      }\n\n      promise.valueOf = function () {\n        var inspected = inspect();\n\n        if (inspected.state === \"pending\" || inspected.state === \"rejected\") {\n          return promise;\n        }\n\n        return inspected.value;\n      };\n    }\n\n    return promise;\n  }\n\n  Promise.prototype.toString = function () {\n    return \"[object Promise]\";\n  };\n\n  Promise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false; // ensure the untrusted promise makes at most a\n    // single call to one of the callbacks\n\n    function _fulfilled(value) {\n      try {\n        return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n      } catch (exception) {\n        return reject(exception);\n      }\n    }\n\n    function _rejected(exception) {\n      if (typeof rejected === \"function\") {\n        makeStackTraceLong(exception, self);\n\n        try {\n          return rejected(exception);\n        } catch (newException) {\n          return reject(newException);\n        }\n      }\n\n      return reject(exception);\n    }\n\n    function _progressed(value) {\n      return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n      self.promiseDispatch(function (value) {\n        if (done) {\n          return;\n        }\n\n        done = true;\n        deferred.resolve(_fulfilled(value));\n      }, \"when\", [function (exception) {\n        if (done) {\n          return;\n        }\n\n        done = true;\n        deferred.resolve(_rejected(exception));\n      }]);\n    }); // Progress propagator need to be attached in the current tick.\n\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n      var newValue;\n      var threw = false;\n\n      try {\n        newValue = _progressed(value);\n      } catch (e) {\n        threw = true;\n\n        if (Q.onerror) {\n          Q.onerror(e);\n        } else {\n          throw e;\n        }\n      }\n\n      if (!threw) {\n        deferred.notify(newValue);\n      }\n    }]);\n    return deferred.promise;\n  };\n\n  Q.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n  };\n  /**\n   * Works almost like \"finally\", but not called for rejections.\n   * Original resolution value is passed through callback unaffected.\n   * Callback may return a promise that will be awaited for.\n   * @param {Function} callback\n   * @returns {Q.Promise}\n   * @example\n   * doSomething()\n   *   .then(...)\n   *   .tap(console.log)\n   *   .then(...);\n   */\n\n\n  Promise.prototype.tap = function (callback) {\n    callback = Q(callback);\n    return this.then(function (value) {\n      return callback.fcall(value).thenResolve(value);\n    });\n  };\n  /**\n   * Registers an observer on a promise.\n   *\n   * Guarantees:\n   *\n   * 1. that fulfilled and rejected will be called only once.\n   * 2. that either the fulfilled callback or the rejected callback will be\n   *    called, but not both.\n   * 3. that fulfilled and rejected will not be called in this turn.\n   *\n   * @param value      promise or immediate reference to observe\n   * @param fulfilled  function to be called with the fulfilled value\n   * @param rejected   function to be called with the rejection exception\n   * @param progressed function to be called on any progress notifications\n   * @return promise for the return value from the invoked callback\n   */\n\n\n  Q.when = when;\n\n  function when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n  }\n\n  Promise.prototype.thenResolve = function (value) {\n    return this.then(function () {\n      return value;\n    });\n  };\n\n  Q.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n  };\n\n  Promise.prototype.thenReject = function (reason) {\n    return this.then(function () {\n      throw reason;\n    });\n  };\n\n  Q.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n  };\n  /**\n   * If an object is not a promise, it is as \"near\" as possible.\n   * If a promise is rejected, it is as \"near\" as possible too.\n   * If it’s a fulfilled promise, the fulfillment value is nearer.\n   * If it’s a deferred promise and the deferred has been resolved, the\n   * resolution is \"nearer\".\n   * @param object\n   * @returns most resolved (nearest) form of the object\n   */\n  // XXX should we re-do this?\n\n\n  Q.nearer = nearer;\n\n  function nearer(value) {\n    if (isPromise(value)) {\n      var inspected = value.inspect();\n\n      if (inspected.state === \"fulfilled\") {\n        return inspected.value;\n      }\n    }\n\n    return value;\n  }\n  /**\n   * @returns whether the given object is a promise.\n   * Otherwise it is a fulfilled value.\n   */\n\n\n  Q.isPromise = isPromise;\n\n  function isPromise(object) {\n    return object instanceof Promise;\n  }\n\n  Q.isPromiseAlike = isPromiseAlike;\n\n  function isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n  }\n  /**\n   * @returns whether the given object is a pending promise, meaning not\n   * fulfilled or rejected.\n   */\n\n\n  Q.isPending = isPending;\n\n  function isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n  }\n\n  Promise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n  };\n  /**\n   * @returns whether the given object is a value or fulfilled\n   * promise.\n   */\n\n\n  Q.isFulfilled = isFulfilled;\n\n  function isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n  }\n\n  Promise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n  };\n  /**\n   * @returns whether the given object is a rejected promise.\n   */\n\n\n  Q.isRejected = isRejected;\n\n  function isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n  }\n\n  Promise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n  }; //// BEGIN UNHANDLED REJECTION TRACKING\n  // This promise library consumes exceptions thrown in handlers so they can be\n  // handled by a subsequent promise.  The exceptions get added to this array when\n  // they are created, and removed when they are handled.  Note that in ES6 or\n  // shimmed environments, this would naturally be a `Set`.\n\n\n  var unhandledReasons = [];\n  var unhandledRejections = [];\n  var reportedUnhandledRejections = [];\n  var trackUnhandledRejections = true;\n\n  function resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n      trackUnhandledRejections = true;\n    }\n  }\n\n  function trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n      return;\n    }\n\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n      Q.nextTick.runAfter(function () {\n        if (array_indexOf(unhandledRejections, promise) !== -1) {\n          process.emit(\"unhandledRejection\", reason, promise);\n          reportedUnhandledRejections.push(promise);\n        }\n      });\n    }\n\n    unhandledRejections.push(promise);\n\n    if (reason && typeof reason.stack !== \"undefined\") {\n      unhandledReasons.push(reason.stack);\n    } else {\n      unhandledReasons.push(\"(no stack) \" + reason);\n    }\n  }\n\n  function untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n      return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n\n    if (at !== -1) {\n      if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n          var atReport = array_indexOf(reportedUnhandledRejections, promise);\n\n          if (atReport !== -1) {\n            process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n            reportedUnhandledRejections.splice(atReport, 1);\n          }\n        });\n      }\n\n      unhandledRejections.splice(at, 1);\n      unhandledReasons.splice(at, 1);\n    }\n  }\n\n  Q.resetUnhandledRejections = resetUnhandledRejections;\n\n  Q.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n  };\n\n  Q.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n  };\n\n  resetUnhandledRejections(); //// END UNHANDLED REJECTION TRACKING\n\n  /**\n   * Constructs a rejected promise.\n   * @param reason value describing the failure\n   */\n\n  Q.reject = reject;\n\n  function reject(reason) {\n    var rejection = Promise({\n      \"when\": function (rejected) {\n        // note that the error has been handled\n        if (rejected) {\n          untrackRejection(this);\n        }\n\n        return rejected ? rejected(reason) : this;\n      }\n    }, function fallback() {\n      return this;\n    }, function inspect() {\n      return {\n        state: \"rejected\",\n        reason: reason\n      };\n    }); // Note that the reason has not been handled.\n\n    trackRejection(rejection, reason);\n    return rejection;\n  }\n  /**\n   * Constructs a fulfilled promise for an immediate reference.\n   * @param value immediate reference\n   */\n\n\n  Q.fulfill = fulfill;\n\n  function fulfill(value) {\n    return Promise({\n      \"when\": function () {\n        return value;\n      },\n      \"get\": function (name) {\n        return value[name];\n      },\n      \"set\": function (name, rhs) {\n        value[name] = rhs;\n      },\n      \"delete\": function (name) {\n        delete value[name];\n      },\n      \"post\": function (name, args) {\n        // Mark Miller proposes that post with no name should apply a\n        // promised function.\n        if (name === null || name === void 0) {\n          return value.apply(void 0, args);\n        } else {\n          return value[name].apply(value, args);\n        }\n      },\n      \"apply\": function (thisp, args) {\n        return value.apply(thisp, args);\n      },\n      \"keys\": function () {\n        return object_keys(value);\n      }\n    }, void 0, function inspect() {\n      return {\n        state: \"fulfilled\",\n        value: value\n      };\n    });\n  }\n  /**\n   * Converts thenables to Q promises.\n   * @param promise thenable promise\n   * @returns a Q promise\n   */\n\n\n  function coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n      try {\n        promise.then(deferred.resolve, deferred.reject, deferred.notify);\n      } catch (exception) {\n        deferred.reject(exception);\n      }\n    });\n    return deferred.promise;\n  }\n  /**\n   * Annotates an object such that it will never be\n   * transferred away from this process over any promise\n   * communication channel.\n   * @param object\n   * @returns promise a wrapping of that object that\n   * additionally responds to the \"isDef\" message\n   * without a rejection.\n   */\n\n\n  Q.master = master;\n\n  function master(object) {\n    return Promise({\n      \"isDef\": function () {}\n    }, function fallback(op, args) {\n      return dispatch(object, op, args);\n    }, function () {\n      return Q(object).inspect();\n    });\n  }\n  /**\n   * Spreads the values of a promised array of arguments into the\n   * fulfillment callback.\n   * @param fulfilled callback that receives variadic arguments from the\n   * promised array\n   * @param rejected callback that receives the exception if the promise\n   * is rejected.\n   * @returns a promise for the return value or thrown exception of\n   * either callback.\n   */\n\n\n  Q.spread = spread;\n\n  function spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n  }\n\n  Promise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n      return fulfilled.apply(void 0, array);\n    }, rejected);\n  };\n  /**\n   * The async function is a decorator for generator functions, turning\n   * them into asynchronous generators.  Although generators are only part\n   * of the newest ECMAScript 6 drafts, this code does not cause syntax\n   * errors in older engines.  This code should continue to work and will\n   * in fact improve over time as the language improves.\n   *\n   * ES6 generators are currently part of V8 version 3.19 with the\n   * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n   * for longer, but under an older Python-inspired form.  This function\n   * works on both kinds of generators.\n   *\n   * Decorates a generator function such that:\n   *  - it may yield promises\n   *  - execution will continue when that promise is fulfilled\n   *  - the value of the yield expression will be the fulfilled value\n   *  - it returns a promise for the return value (when the generator\n   *    stops iterating)\n   *  - the decorated function returns a promise for the return value\n   *    of the generator or the first rejected promise among those\n   *    yielded.\n   *  - if an error is thrown in the generator, it propagates through\n   *    every following yield until it is caught, or until it escapes\n   *    the generator function altogether, and is translated into a\n   *    rejection for the promise returned by the decorated generator.\n   */\n\n\n  Q.async = async;\n\n  function async(makeGenerator) {\n    return function () {\n      // when verb is \"send\", arg is a value\n      // when verb is \"throw\", arg is an exception\n      function continuer(verb, arg) {\n        var result; // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n        // engine that has a deployed base of browsers that support generators.\n        // However, SM's generators use the Python-inspired semantics of\n        // outdated ES6 drafts.  We would like to support ES6, but we'd also\n        // like to make it possible to use generators in deployed browsers, so\n        // we also support Python-style generators.  At some point we can remove\n        // this block.\n\n        if (typeof StopIteration === \"undefined\") {\n          // ES6 Generators\n          try {\n            result = generator[verb](arg);\n          } catch (exception) {\n            return reject(exception);\n          }\n\n          if (result.done) {\n            return Q(result.value);\n          } else {\n            return when(result.value, callback, errback);\n          }\n        } else {\n          // SpiderMonkey Generators\n          // FIXME: Remove this case when SM does ES6 generators.\n          try {\n            result = generator[verb](arg);\n          } catch (exception) {\n            if (isStopIteration(exception)) {\n              return Q(exception.value);\n            } else {\n              return reject(exception);\n            }\n          }\n\n          return when(result, callback, errback);\n        }\n      }\n\n      var generator = makeGenerator.apply(this, arguments);\n      var callback = continuer.bind(continuer, \"next\");\n      var errback = continuer.bind(continuer, \"throw\");\n      return callback();\n    };\n  }\n  /**\n   * The spawn function is a small wrapper around async that immediately\n   * calls the generator and also ends the promise chain, so that any\n   * unhandled errors are thrown instead of forwarded to the error\n   * handler. This is useful because it's extremely common to run\n   * generators at the top-level to work with libraries.\n   */\n\n\n  Q.spawn = spawn;\n\n  function spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n  } // FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n\n  /**\n   * Throws a ReturnValue exception to stop an asynchronous generator.\n   *\n   * This interface is a stop-gap measure to support generator return\n   * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n   * generators like Chromium 29, just use \"return\" in your generator\n   * functions.\n   *\n   * @param value the return value for the surrounding generator\n   * @throws ReturnValue exception with the value.\n   * @example\n   * // ES6 style\n   * Q.async(function* () {\n   *      var foo = yield getFooPromise();\n   *      var bar = yield getBarPromise();\n   *      return foo + bar;\n   * })\n   * // Older SpiderMonkey style\n   * Q.async(function () {\n   *      var foo = yield getFooPromise();\n   *      var bar = yield getBarPromise();\n   *      Q.return(foo + bar);\n   * })\n   */\n\n\n  Q[\"return\"] = _return;\n\n  function _return(value) {\n    throw new QReturnValue(value);\n  }\n  /**\n   * The promised function decorator ensures that any promise arguments\n   * are settled and passed as values (`this` is also settled and passed\n   * as a value).  It will also ensure that the result of a function is\n   * always a promise.\n   *\n   * @example\n   * var add = Q.promised(function (a, b) {\n   *     return a + b;\n   * });\n   * add(Q(a), Q(B));\n   *\n   * @param {function} callback The function to decorate\n   * @returns {function} a function that has been decorated.\n   */\n\n\n  Q.promised = promised;\n\n  function promised(callback) {\n    return function () {\n      return spread([this, all(arguments)], function (self, args) {\n        return callback.apply(self, args);\n      });\n    };\n  }\n  /**\n   * sends a message to a value in a future turn\n   * @param object* the recipient\n   * @param op the name of the message operation, e.g., \"when\",\n   * @param args further arguments to be forwarded to the operation\n   * @returns result {Promise} a promise for the result of the operation\n   */\n\n\n  Q.dispatch = dispatch;\n\n  function dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n  }\n\n  Promise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n      self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n  };\n  /**\n   * Gets the value of a property in a future turn.\n   * @param object    promise or immediate reference for target object\n   * @param name      name of property to get\n   * @return promise for the property value\n   */\n\n\n  Q.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n  };\n\n  Promise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n  };\n  /**\n   * Sets the value of a property in a future turn.\n   * @param object    promise or immediate reference for object object\n   * @param name      name of property to set\n   * @param value     new value of property\n   * @return promise for the return value\n   */\n\n\n  Q.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n  };\n\n  Promise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n  };\n  /**\n   * Deletes a property in a future turn.\n   * @param object    promise or immediate reference for target object\n   * @param name      name of property to delete\n   * @return promise for the return value\n   */\n\n\n  Q.del = // XXX legacy\n  Q[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n  };\n\n  Promise.prototype.del = // XXX legacy\n  Promise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n  };\n  /**\n   * Invokes a method in a future turn.\n   * @param object    promise or immediate reference for target object\n   * @param name      name of method to invoke\n   * @param value     a value to post, typically an array of\n   *                  invocation arguments for promises that\n   *                  are ultimately backed with `resolve` values,\n   *                  as opposed to those backed with URLs\n   *                  wherein the posted value can be any\n   *                  JSON serializable object.\n   * @return promise for the return value\n   */\n  // bound locally because it is used by other methods\n\n\n  Q.mapply = // XXX As proposed by \"Redsandro\"\n  Q.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n  };\n\n  Promise.prototype.mapply = // XXX As proposed by \"Redsandro\"\n  Promise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n  };\n  /**\n   * Invokes a method in a future turn.\n   * @param object    promise or immediate reference for target object\n   * @param name      name of method to invoke\n   * @param ...args   array of invocation arguments\n   * @return promise for the return value\n   */\n\n\n  Q.send = // XXX Mark Miller's proposed parlance\n  Q.mcall = // XXX As proposed by \"Redsandro\"\n  Q.invoke = function (object, name\n  /*...args*/\n  ) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n  };\n\n  Promise.prototype.send = // XXX Mark Miller's proposed parlance\n  Promise.prototype.mcall = // XXX As proposed by \"Redsandro\"\n  Promise.prototype.invoke = function (name\n  /*...args*/\n  ) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n  };\n  /**\n   * Applies the promised function in a future turn.\n   * @param object    promise or immediate reference for target function\n   * @param args      array of application arguments\n   */\n\n\n  Q.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n  };\n\n  Promise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n  };\n  /**\n   * Calls the promised function in a future turn.\n   * @param object    promise or immediate reference for target function\n   * @param ...args   array of application arguments\n   */\n\n\n  Q[\"try\"] = Q.fcall = function (object\n  /* ...args*/\n  ) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n  };\n\n  Promise.prototype.fcall = function ()\n  /*...args*/\n  {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n  };\n  /**\n   * Binds the promised function, transforming return values into a fulfilled\n   * promise and thrown errors into a rejected one.\n   * @param object    promise or immediate reference for target function\n   * @param ...args   array of application arguments\n   */\n\n\n  Q.fbind = function (object\n  /*...args*/\n  ) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n      return promise.dispatch(\"apply\", [this, args.concat(array_slice(arguments))]);\n    };\n  };\n\n  Promise.prototype.fbind = function ()\n  /*...args*/\n  {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n      return promise.dispatch(\"apply\", [this, args.concat(array_slice(arguments))]);\n    };\n  };\n  /**\n   * Requests the names of the owned properties of a promised\n   * object in a future turn.\n   * @param object    promise or immediate reference for target object\n   * @return promise for the keys of the eventually settled object\n   */\n\n\n  Q.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n  };\n\n  Promise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n  };\n  /**\n   * Turns an array of promises into a promise for an array.  If any of\n   * the promises gets rejected, the whole array is rejected immediately.\n   * @param {Array*} an array (or promise for an array) of values (or\n   * promises for values)\n   * @returns a promise for an array of the corresponding values\n   */\n  // By Mark Miller\n  // http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\n\n\n  Q.all = all;\n\n  function all(promises) {\n    return when(promises, function (promises) {\n      var pendingCount = 0;\n      var deferred = defer();\n      array_reduce(promises, function (undefined, promise, index) {\n        var snapshot;\n\n        if (isPromise(promise) && (snapshot = promise.inspect()).state === \"fulfilled\") {\n          promises[index] = snapshot.value;\n        } else {\n          ++pendingCount;\n          when(promise, function (value) {\n            promises[index] = value;\n\n            if (--pendingCount === 0) {\n              deferred.resolve(promises);\n            }\n          }, deferred.reject, function (progress) {\n            deferred.notify({\n              index: index,\n              value: progress\n            });\n          });\n        }\n      }, void 0);\n\n      if (pendingCount === 0) {\n        deferred.resolve(promises);\n      }\n\n      return deferred.promise;\n    });\n  }\n\n  Promise.prototype.all = function () {\n    return all(this);\n  };\n  /**\n   * Returns the first resolved promise of an array. Prior rejected promises are\n   * ignored.  Rejects only if all promises are rejected.\n   * @param {Array*} an array containing values or promises for values\n   * @returns a promise fulfilled with the value of the first resolved promise,\n   * or a rejected promise if all promises are rejected.\n   */\n\n\n  Q.any = any;\n\n  function any(promises) {\n    if (promises.length === 0) {\n      return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n      var promise = promises[index];\n      pendingCount++;\n      when(promise, onFulfilled, onRejected, onProgress);\n\n      function onFulfilled(result) {\n        deferred.resolve(result);\n      }\n\n      function onRejected() {\n        pendingCount--;\n\n        if (pendingCount === 0) {\n          deferred.reject(new Error(\"Can't get fulfillment value from any promise, all \" + \"promises were rejected.\"));\n        }\n      }\n\n      function onProgress(progress) {\n        deferred.notify({\n          index: index,\n          value: progress\n        });\n      }\n    }, undefined);\n    return deferred.promise;\n  }\n\n  Promise.prototype.any = function () {\n    return any(this);\n  };\n  /**\n   * Waits for all promises to be settled, either fulfilled or\n   * rejected.  This is distinct from `all` since that would stop\n   * waiting at the first rejection.  The promise returned by\n   * `allResolved` will never be rejected.\n   * @param promises a promise for an array (or an array) of promises\n   * (or values)\n   * @return a promise for an array of promises\n   */\n\n\n  Q.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\n\n  function allResolved(promises) {\n    return when(promises, function (promises) {\n      promises = array_map(promises, Q);\n      return when(all(array_map(promises, function (promise) {\n        return when(promise, noop, noop);\n      })), function () {\n        return promises;\n      });\n    });\n  }\n\n  Promise.prototype.allResolved = function () {\n    return allResolved(this);\n  };\n  /**\n   * @see Promise#allSettled\n   */\n\n\n  Q.allSettled = allSettled;\n\n  function allSettled(promises) {\n    return Q(promises).allSettled();\n  }\n  /**\n   * Turns an array of promises into a promise for an array of their states (as\n   * returned by `inspect`) when they have all settled.\n   * @param {Array[Any*]} values an array (or promise for an array) of values (or\n   * promises for values)\n   * @returns {Array[State]} an array of states for the respective values.\n   */\n\n\n  Promise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n      return all(array_map(promises, function (promise) {\n        promise = Q(promise);\n\n        function regardless() {\n          return promise.inspect();\n        }\n\n        return promise.then(regardless, regardless);\n      }));\n    });\n  };\n  /**\n   * Captures the failure of a promise, giving an oportunity to recover\n   * with a callback.  If the given promise is fulfilled, the returned\n   * promise is fulfilled.\n   * @param {Any*} promise for something\n   * @param {Function} callback to fulfill the returned promise if the\n   * given promise is rejected\n   * @returns a promise for the return value of the callback\n   */\n\n\n  Q.fail = // XXX legacy\n  Q[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n  };\n\n  Promise.prototype.fail = // XXX legacy\n  Promise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n  };\n  /**\n   * Attaches a listener that can respond to progress notifications from a\n   * promise's originating deferred. This listener receives the exact arguments\n   * passed to ``deferred.notify``.\n   * @param {Any*} promise for something\n   * @param {Function} callback to receive any progress notifications\n   * @returns the given promise, unchanged\n   */\n\n\n  Q.progress = progress;\n\n  function progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n  }\n\n  Promise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n  };\n  /**\n   * Provides an opportunity to observe the settling of a promise,\n   * regardless of whether the promise is fulfilled or rejected.  Forwards\n   * the resolution to the returned promise when the callback is done.\n   * The callback can return a promise to defer completion.\n   * @param {Any*} promise\n   * @param {Function} callback to observe the resolution of the given\n   * promise, takes no arguments.\n   * @returns a promise for the resolution of the given promise when\n   * ``fin`` is done.\n   */\n\n\n  Q.fin = // XXX legacy\n  Q[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n  };\n\n  Promise.prototype.fin = // XXX legacy\n  Promise.prototype[\"finally\"] = function (callback) {\n    callback = Q(callback);\n    return this.then(function (value) {\n      return callback.fcall().then(function () {\n        return value;\n      });\n    }, function (reason) {\n      // TODO attempt to recycle the rejection with \"this\".\n      return callback.fcall().then(function () {\n        throw reason;\n      });\n    });\n  };\n  /**\n   * Terminates a chain of promises, forcing rejections to be\n   * thrown as exceptions.\n   * @param {Any*} promise at the end of a chain of promises\n   * @returns nothing\n   */\n\n\n  Q.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n  };\n\n  Promise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n      // forward to a future turn so that ``when``\n      // does not catch it and turn it into a rejection.\n      Q.nextTick(function () {\n        makeStackTraceLong(error, promise);\n\n        if (Q.onerror) {\n          Q.onerror(error);\n        } else {\n          throw error;\n        }\n      });\n    }; // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n\n\n    var promise = fulfilled || rejected || progress ? this.then(fulfilled, rejected, progress) : this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n      onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n  };\n  /**\n   * Causes a promise to be rejected if it does not get fulfilled before\n   * some milliseconds time out.\n   * @param {Any*} promise\n   * @param {Number} milliseconds timeout\n   * @param {Any*} custom error message or Error object (optional)\n   * @returns a promise for the resolution of the given promise if it is\n   * fulfilled before the timeout, otherwise rejected.\n   */\n\n\n  Q.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n  };\n\n  Promise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n      if (!error || \"string\" === typeof error) {\n        error = new Error(error || \"Timed out after \" + ms + \" ms\");\n        error.code = \"ETIMEDOUT\";\n      }\n\n      deferred.reject(error);\n    }, ms);\n    this.then(function (value) {\n      clearTimeout(timeoutId);\n      deferred.resolve(value);\n    }, function (exception) {\n      clearTimeout(timeoutId);\n      deferred.reject(exception);\n    }, deferred.notify);\n    return deferred.promise;\n  };\n  /**\n   * Returns a promise for the given value (or promised value), some\n   * milliseconds after it resolved. Passes rejections immediately.\n   * @param {Any*} promise\n   * @param {Number} milliseconds\n   * @returns a promise for the resolution of the given promise after milliseconds\n   * time has elapsed since the resolution of the given promise.\n   * If the given promise rejects, that is passed immediately.\n   */\n\n\n  Q.delay = function (object, timeout) {\n    if (timeout === void 0) {\n      timeout = object;\n      object = void 0;\n    }\n\n    return Q(object).delay(timeout);\n  };\n\n  Promise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n      var deferred = defer();\n      setTimeout(function () {\n        deferred.resolve(value);\n      }, timeout);\n      return deferred.promise;\n    });\n  };\n  /**\n   * Passes a continuation to a Node function, which is called with the given\n   * arguments provided as an array, and returns a promise.\n   *\n   *      Q.nfapply(FS.readFile, [__filename])\n   *      .then(function (content) {\n   *      })\n   *\n   */\n\n\n  Q.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n  };\n\n  Promise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n  };\n  /**\n   * Passes a continuation to a Node function, which is called with the given\n   * arguments provided individually, and returns a promise.\n   * @example\n   * Q.nfcall(FS.readFile, __filename)\n   * .then(function (content) {\n   * })\n   *\n   */\n\n\n  Q.nfcall = function (callback\n  /*...args*/\n  ) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n  };\n\n  Promise.prototype.nfcall = function ()\n  /*...args*/\n  {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n  };\n  /**\n   * Wraps a NodeJS continuation passing function and returns an equivalent\n   * version that returns a promise.\n   * @example\n   * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n   * .then(console.log)\n   * .done()\n   */\n\n\n  Q.nfbind = Q.denodeify = function (callback\n  /*...args*/\n  ) {\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n      var nodeArgs = baseArgs.concat(array_slice(arguments));\n      var deferred = defer();\n      nodeArgs.push(deferred.makeNodeResolver());\n      Q(callback).fapply(nodeArgs).fail(deferred.reject);\n      return deferred.promise;\n    };\n  };\n\n  Promise.prototype.nfbind = Promise.prototype.denodeify = function ()\n  /*...args*/\n  {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n  };\n\n  Q.nbind = function (callback, thisp\n  /*...args*/\n  ) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n      var nodeArgs = baseArgs.concat(array_slice(arguments));\n      var deferred = defer();\n      nodeArgs.push(deferred.makeNodeResolver());\n\n      function bound() {\n        return callback.apply(thisp, arguments);\n      }\n\n      Q(bound).fapply(nodeArgs).fail(deferred.reject);\n      return deferred.promise;\n    };\n  };\n\n  Promise.prototype.nbind = function ()\n  /*thisp, ...args*/\n  {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n  };\n  /**\n   * Calls a method of a Node-style object that accepts a Node-style\n   * callback with a given array of arguments, plus a provided callback.\n   * @param object an object that has the named method\n   * @param {String} name name of the method of object\n   * @param {Array} args arguments to pass to the method; the callback\n   * will be provided by Q and appended to these arguments.\n   * @returns a promise for the value or error\n   */\n\n\n  Q.nmapply = // XXX As proposed by \"Redsandro\"\n  Q.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n  };\n\n  Promise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\n  Promise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n  };\n  /**\n   * Calls a method of a Node-style object that accepts a Node-style\n   * callback, forwarding the given variadic arguments, plus a provided\n   * callback argument.\n   * @param object an object that has the named method\n   * @param {String} name name of the method of object\n   * @param ...args arguments to pass to the method; the callback will\n   * be provided by Q and appended to these arguments.\n   * @returns a promise for the value or error\n   */\n\n\n  Q.nsend = // XXX Based on Mark Miller's proposed \"send\"\n  Q.nmcall = // XXX Based on \"Redsandro's\" proposal\n  Q.ninvoke = function (object, name\n  /*...args*/\n  ) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n  };\n\n  Promise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\n  Promise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\n  Promise.prototype.ninvoke = function (name\n  /*...args*/\n  ) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n  };\n  /**\n   * If a function would like to support both Node continuation-passing-style and\n   * promise-returning-style, it can end its internal promise chain with\n   * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n   * elects to use a nodeback, the result will be sent there.  If they do not\n   * pass a nodeback, they will receive the result promise.\n   * @param object a result (or a promise for a result)\n   * @param {Function} nodeback a Node.js-style callback\n   * @returns either the promise or nothing\n   */\n\n\n  Q.nodeify = nodeify;\n\n  function nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n  }\n\n  Promise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n      this.then(function (value) {\n        Q.nextTick(function () {\n          nodeback(null, value);\n        });\n      }, function (error) {\n        Q.nextTick(function () {\n          nodeback(error);\n        });\n      });\n    } else {\n      return this;\n    }\n  };\n\n  Q.noConflict = function () {\n    throw new Error(\"Q.noConflict only works when Q is used as a global\");\n  }; // All code before this point will be filtered from stack traces.\n\n\n  var qEndingLine = captureLine();\n  return Q;\n});","map":{"version":3,"sources":["/Users/alanboyce/dev/bittap/ui/node_modules/@okta/okta-auth-js/node_modules/q/q.js"],"names":["definition","bootstrap","exports","module","define","amd","ses","ok","makeQ","window","self","global","previousQ","Q","noConflict","Error","hasStacks","e","stack","qStartingLine","captureLine","qFileName","noop","nextTick","head","task","next","tail","flushing","requestTick","isNodeJS","laterQueue","flush","domain","enter","runSingle","length","pop","exit","setTimeout","process","toString","setImmediate","bind","MessageChannel","channel","port1","onmessage","requestPortTick","port2","postMessage","runAfter","push","call","Function","uncurryThis","f","apply","arguments","array_slice","Array","prototype","slice","array_reduce","reduce","callback","basis","index","TypeError","array_indexOf","indexOf","value","i","array_map","map","thisp","collect","undefined","object_create","Object","create","Type","object_hasOwnProperty","hasOwnProperty","object_keys","keys","object","key","object_toString","isObject","isStopIteration","exception","QReturnValue","ReturnValue","STACK_JUMP_SEPARATOR","makeStackTraceLong","error","promise","stacks","p","source","unshift","concatedStacks","join","filterStackString","stackString","lines","split","desiredLines","line","isInternalFrame","isNodeFrame","stackLine","getFileNameAndLineNumber","attempt1","exec","Number","attempt2","attempt3","fileNameAndLineNumber","fileName","lineNumber","qEndingLine","firstLine","deprecate","name","alternative","console","warn","Promise","isPromiseAlike","coerce","fulfill","resolve","longStackSupport","env","Q_DEBUG","defer","messages","progressListeners","resolvedPromise","deferred","promiseDispatch","op","operands","args","valueOf","nearerValue","nearer","isPromise","inspect","state","substring","become","newPromise","message","reject","reason","notify","progress","progressListener","makeNodeResolver","resolver","race","all","passByCopy","x","y","that","spread","answerPs","len","then","makePromise","descriptor","fallback","result","inspected","fulfilled","rejected","progressed","done","_fulfilled","_rejected","newException","_progressed","newValue","threw","onerror","tap","fcall","thenResolve","when","thenReject","isPending","isFulfilled","isRejected","unhandledReasons","unhandledRejections","reportedUnhandledRejections","trackUnhandledRejections","resetUnhandledRejections","trackRejection","emit","untrackRejection","at","atReport","splice","getUnhandledReasons","stopUnhandledRejectionTracking","rejection","rhs","master","dispatch","array","async","makeGenerator","continuer","verb","arg","StopIteration","generator","errback","spawn","_return","promised","get","set","del","mapply","post","send","mcall","invoke","fapply","fbind","fbound","concat","promises","pendingCount","snapshot","any","prev","current","onFulfilled","onRejected","onProgress","allResolved","allSettled","regardless","fail","fin","onUnhandledError","timeout","ms","timeoutId","code","clearTimeout","delay","nfapply","nodeArgs","nfcall","nfbind","denodeify","baseArgs","nbind","bound","nmapply","npost","nsend","nmcall","ninvoke","nodeify","nodeback"],"mappings":"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","sourcesContent":["// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    \"use strict\";\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\" && typeof module === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define(definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else if (typeof window !== \"undefined\" || typeof self !== \"undefined\") {\n        // Prefer window over self for add-on scripts. Use self for\n        // non-windowed contexts.\n        var global = typeof window !== \"undefined\" ? window : self;\n\n        // Get the `window` object, save the previous Q global\n        // and initialize Q as a global.\n        var previousQ = global.Q;\n        global.Q = definition();\n\n        // Add a noConflict function so Q can be removed from the\n        // global namespace.\n        global.Q.noConflict = function () {\n            global.Q = previousQ;\n            return this;\n        };\n\n    } else {\n        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n    // queue for late tasks, used by unhandled rejection tracking\n    var laterQueue = [];\n\n    function flush() {\n        /* jshint loopfunc: true */\n        var task, domain;\n\n        while (head.next) {\n            head = head.next;\n            task = head.task;\n            head.task = void 0;\n            domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n            runSingle(task, domain);\n\n        }\n        while (laterQueue.length) {\n            task = laterQueue.pop();\n            runSingle(task);\n        }\n        flushing = false;\n    }\n    // runs a single function in the async queue\n    function runSingle(task, domain) {\n        try {\n            task();\n\n        } catch (e) {\n            if (isNodeJS) {\n                // In node, uncaught exceptions are considered fatal errors.\n                // Re-throw them synchronously to interrupt flushing!\n\n                // Ensure continuation if the uncaught exception is suppressed\n                // listening \"uncaughtException\" events (as domains does).\n                // Continue in next event to avoid tick recursion.\n                if (domain) {\n                    domain.exit();\n                }\n                setTimeout(flush, 0);\n                if (domain) {\n                    domain.enter();\n                }\n\n                throw e;\n\n            } else {\n                // In browsers, uncaught exceptions are not fatal.\n                // Re-throw them asynchronously to avoid slow-downs.\n                setTimeout(function () {\n                    throw e;\n                }, 0);\n            }\n        }\n\n        if (domain) {\n            domain.exit();\n        }\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process === \"object\" &&\n        process.toString() === \"[object process]\" && process.nextTick) {\n        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n        // To see through fake Node environments:\n        // * Mocha test runner - exposes a `process` global without a `nextTick`\n        // * Browserify - exposes a `process.nexTick` function that uses\n        //   `setTimeout`. In this case `setImmediate` is preferred because\n        //    it is faster. Browserify's `process.toString()` yields\n        //   \"[object Object]\", while in a real Node environment\n        //   `process.nextTick()` yields \"[object process]\".\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n    // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n    nextTick.runAfter = function (task) {\n        laterQueue.push(task);\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack &&\n        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack) {\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        error.stack = filterStackString(concatedStacks);\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n// enable long stacks if Q_DEBUG is set\nif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n}\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            Q.nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n        promise.source = newPromise;\n\n        array_reduce(messages, function (undefined, message) {\n            Q.nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            Q.nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become settled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be settled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function (resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function (answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\nQ.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n};\n\n/**\n * Works almost like \"finally\", but not called for rejections.\n * Original resolution value is passed through callback unaffected.\n * Callback may return a promise that will be awaited for.\n * @param {Function} callback\n * @returns {Q.Promise}\n * @example\n * doSomething()\n *   .then(...)\n *   .tap(console.log)\n *   .then(...);\n */\nPromise.prototype.tap = function (callback) {\n    callback = Q(callback);\n\n    return this.then(function (value) {\n        return callback.fcall(value).thenResolve(value);\n    });\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return object instanceof Promise;\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar reportedUnhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n            if (array_indexOf(unhandledRejections, promise) !== -1) {\n                process.emit(\"unhandledRejection\", reason, promise);\n                reportedUnhandledRejections.push(promise);\n            }\n        });\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n            Q.nextTick.runAfter(function () {\n                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n                if (atReport !== -1) {\n                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n                    reportedUnhandledRejections.splice(atReport, 1);\n                }\n            });\n        }\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return Q(result.value);\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return Q(exception.value);\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var pendingCount = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++pendingCount;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--pendingCount === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (pendingCount === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Returns the first resolved promise of an array. Prior rejected promises are\n * ignored.  Rejects only if all promises are rejected.\n * @param {Array*} an array containing values or promises for values\n * @returns a promise fulfilled with the value of the first resolved promise,\n * or a rejected promise if all promises are rejected.\n */\nQ.any = any;\n\nfunction any(promises) {\n    if (promises.length === 0) {\n        return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n        var promise = promises[index];\n\n        pendingCount++;\n\n        when(promise, onFulfilled, onRejected, onProgress);\n        function onFulfilled(result) {\n            deferred.resolve(result);\n        }\n        function onRejected() {\n            pendingCount--;\n            if (pendingCount === 0) {\n                deferred.reject(new Error(\n                    \"Can't get fulfillment value from any promise, all \" +\n                    \"promises were rejected.\"\n                ));\n            }\n        }\n        function onProgress(progress) {\n            deferred.notify({\n                index: index,\n                value: progress\n            });\n        }\n    }, undefined);\n\n    return deferred.promise;\n}\n\nPromise.prototype.any = function () {\n    return any(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        Q.nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {Any*} custom error message or Error object (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n};\n\nPromise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        if (!error || \"string\" === typeof error) {\n            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n            error.code = \"ETIMEDOUT\";\n        }\n        deferred.reject(error);\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            Q.nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            Q.nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\nQ.noConflict = function() {\n    throw new Error(\"Q.noConflict only works when Q is used as a global\");\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n"]},"metadata":{},"sourceType":"script"}