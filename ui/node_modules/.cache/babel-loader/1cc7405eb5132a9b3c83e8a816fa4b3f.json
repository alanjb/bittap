{"ast":null,"code":"/*!\n * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nrequire('Base64'); // Production steps of ECMA-262, Edition 5, 15.4.4.14\n// Reference: http://es5.github.io/#x15.4.4.14\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Polyfill\n\n\nif (!Array.prototype.indexOf) {\n  Array.prototype.indexOf = function (searchElement, fromIndex) {\n    var k; // 1. Let o be the result of calling ToObject passing\n    //    the this value as the argument.\n\n    if (this == null) {\n      throw new TypeError('\"this\" is null or not defined');\n    }\n\n    var o = Object(this); // 2. Let lenValue be the result of calling the Get\n    //    internal method of o with the argument \"length\".\n    // 3. Let len be ToUint32(lenValue).\n\n    var len = o.length >>> 0; // 4. If len is 0, return -1.\n\n    if (len === 0) {\n      return -1;\n    } // 5. If argument fromIndex was passed let n be\n    //    ToInteger(fromIndex); else let n be 0.\n\n\n    var n = +fromIndex || 0;\n\n    if (Math.abs(n) === Infinity) {\n      n = 0;\n    } // 6. If n >= len, return -1.\n\n\n    if (n >= len) {\n      return -1;\n    } // 7. If n >= 0, then Let k be n.\n    // 8. Else, n<0, Let k be len - abs(n).\n    //    If k is less than 0, then let k be 0.\n\n\n    k = Math.max(n >= 0 ? n : len - Math.abs(n), 0); // 9. Repeat, while k < len\n\n    while (k < len) {\n      // a. Let Pk be ToString(k).\n      //   This is implicit for LHS operands of the in operator\n      // b. Let kPresent be the result of calling the\n      //    HasProperty internal method of o with argument Pk.\n      //   This step can be combined with c\n      // c. If kPresent is true, then\n      //    i.  Let elementK be the result of calling the Get\n      //        internal method of o with the argument ToString(k).\n      //   ii.  Let same be the result of applying the\n      //        Strict Equality Comparison Algorithm to\n      //        searchElement and elementK.\n      //  iii.  If same is true, return k.\n      if (k in o && o[k] === searchElement) {\n        return k;\n      }\n\n      k++;\n    }\n\n    return -1;\n  };\n}\n\nif (!Array.isArray) {\n  Array.isArray = function (obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  };\n}","map":{"version":3,"sources":["/app/node_modules/@okta/okta-auth-js/lib/vendor/polyfills.js"],"names":["require","Array","prototype","indexOf","searchElement","fromIndex","k","TypeError","o","Object","len","length","n","Math","abs","Infinity","max","isArray","obj","toString","call"],"mappings":"AAAA;;;;;;;;;;;AAYAA,OAAO,CAAC,QAAD,CAAP,C,CAEA;AACA;AACA;;;AACA,IAAI,CAACC,KAAK,CAACC,SAAN,CAAgBC,OAArB,EAA8B;AAC5BF,EAAAA,KAAK,CAACC,SAAN,CAAgBC,OAAhB,GAA0B,UAASC,aAAT,EAAwBC,SAAxB,EAAmC;AAE3D,QAAIC,CAAJ,CAF2D,CAI3D;AACA;;AACA,QAAI,QAAQ,IAAZ,EAAkB;AAChB,YAAM,IAAIC,SAAJ,CAAc,+BAAd,CAAN;AACD;;AAED,QAAIC,CAAC,GAAGC,MAAM,CAAC,IAAD,CAAd,CAV2D,CAY3D;AACA;AACA;;AACA,QAAIC,GAAG,GAAGF,CAAC,CAACG,MAAF,KAAa,CAAvB,CAf2D,CAiB3D;;AACA,QAAID,GAAG,KAAK,CAAZ,EAAe;AACb,aAAO,CAAC,CAAR;AACD,KApB0D,CAsB3D;AACA;;;AACA,QAAIE,CAAC,GAAG,CAACP,SAAD,IAAc,CAAtB;;AAEA,QAAIQ,IAAI,CAACC,GAAL,CAASF,CAAT,MAAgBG,QAApB,EAA8B;AAC5BH,MAAAA,CAAC,GAAG,CAAJ;AACD,KA5B0D,CA8B3D;;;AACA,QAAIA,CAAC,IAAIF,GAAT,EAAc;AACZ,aAAO,CAAC,CAAR;AACD,KAjC0D,CAmC3D;AACA;AACA;;;AACAJ,IAAAA,CAAC,GAAGO,IAAI,CAACG,GAAL,CAASJ,CAAC,IAAI,CAAL,GAASA,CAAT,GAAaF,GAAG,GAAGG,IAAI,CAACC,GAAL,CAASF,CAAT,CAA5B,EAAyC,CAAzC,CAAJ,CAtC2D,CAwC3D;;AACA,WAAON,CAAC,GAAGI,GAAX,EAAgB;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAIJ,CAAC,IAAIE,CAAL,IAAUA,CAAC,CAACF,CAAD,CAAD,KAASF,aAAvB,EAAsC;AACpC,eAAOE,CAAP;AACD;;AACDA,MAAAA,CAAC;AACF;;AACD,WAAO,CAAC,CAAR;AACD,GA5DD;AA6DD;;AAED,IAAI,CAACL,KAAK,CAACgB,OAAX,EAAoB;AAClBhB,EAAAA,KAAK,CAACgB,OAAN,GAAgB,UAASC,GAAT,EAAc;AAC5B,WAAOT,MAAM,CAACP,SAAP,CAAiBiB,QAAjB,CAA0BC,IAA1B,CAA+BF,GAA/B,MAAwC,gBAA/C;AACD,GAFD;AAGD","sourcesContent":["/*!\n * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nrequire('Base64');\n\n// Production steps of ECMA-262, Edition 5, 15.4.4.14\n// Reference: http://es5.github.io/#x15.4.4.14\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Polyfill\nif (!Array.prototype.indexOf) {\n  Array.prototype.indexOf = function(searchElement, fromIndex) {\n\n    var k;\n\n    // 1. Let o be the result of calling ToObject passing\n    //    the this value as the argument.\n    if (this == null) {\n      throw new TypeError('\"this\" is null or not defined');\n    }\n\n    var o = Object(this);\n\n    // 2. Let lenValue be the result of calling the Get\n    //    internal method of o with the argument \"length\".\n    // 3. Let len be ToUint32(lenValue).\n    var len = o.length >>> 0;\n\n    // 4. If len is 0, return -1.\n    if (len === 0) {\n      return -1;\n    }\n\n    // 5. If argument fromIndex was passed let n be\n    //    ToInteger(fromIndex); else let n be 0.\n    var n = +fromIndex || 0;\n\n    if (Math.abs(n) === Infinity) {\n      n = 0;\n    }\n\n    // 6. If n >= len, return -1.\n    if (n >= len) {\n      return -1;\n    }\n\n    // 7. If n >= 0, then Let k be n.\n    // 8. Else, n<0, Let k be len - abs(n).\n    //    If k is less than 0, then let k be 0.\n    k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n    // 9. Repeat, while k < len\n    while (k < len) {\n      // a. Let Pk be ToString(k).\n      //   This is implicit for LHS operands of the in operator\n      // b. Let kPresent be the result of calling the\n      //    HasProperty internal method of o with argument Pk.\n      //   This step can be combined with c\n      // c. If kPresent is true, then\n      //    i.  Let elementK be the result of calling the Get\n      //        internal method of o with the argument ToString(k).\n      //   ii.  Let same be the result of applying the\n      //        Strict Equality Comparison Algorithm to\n      //        searchElement and elementK.\n      //  iii.  If same is true, return k.\n      if (k in o && o[k] === searchElement) {\n        return k;\n      }\n      k++;\n    }\n    return -1;\n  };\n}\n\nif (!Array.isArray) {\n  Array.isArray = function(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  };\n}\n"]},"metadata":{},"sourceType":"script"}