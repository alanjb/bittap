{"ast":null,"code":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/*!\n * Copyright (c) 2018-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nvar merge = require('lodash/merge');\n\nvar ConfigurationValidationError = function (_Error) {\n  _inherits(ConfigurationValidationError, _Error);\n\n  function ConfigurationValidationError() {\n    _classCallCheck(this, ConfigurationValidationError);\n\n    return _possibleConstructorReturn(this, (ConfigurationValidationError.__proto__ || Object.getPrototypeOf(ConfigurationValidationError)).apply(this, arguments));\n  }\n\n  return ConfigurationValidationError;\n}(Error);\n\nvar configUtil = module.exports;\nvar findDomainURL = 'https://bit.ly/finding-okta-domain';\nvar findAppCredentialsURL = 'https://bit.ly/finding-okta-app-credentials';\nvar copyCredentialsMessage = 'You can copy it from the Okta Developer Console ' + 'in the details for the Application you created. ' + ('Follow these instructions to find it: ' + findAppCredentialsURL);\nvar isHttps = new RegExp('^https://');\nvar hasProtocol = new RegExp('://');\nvar hasDomainAdmin = /-admin.(okta|oktapreview|okta-emea).com/;\nvar hasDomainTypo = new RegExp('(.com.com)|(://.*){2,}');\nvar endsInPath = new RegExp('/$');\n\nconfigUtil.buildConfigObject = function (config) {\n  // See all supported options: https://github.com/okta/okta-auth-js#configuration-reference\n  // Support for parameters with an underscore will be deprecated in a future release\n  // camelCase was added 2/11/2019: https://github.com/okta/okta-oidc-js/commit/9b04ada6a01c9d9aca391abf0de3e5ecc9811e64\n  config = config || {}; // accept empty\n  // Legacy support: allow a property named 'scope' to be either an array or a string.\n\n  var scopes = config.scopes;\n\n  if (!scopes && config.scope) {\n    if (Array.isArray(config.scope)) {\n      scopes = config.scope;\n    } else {\n      scopes = config.scope.split(/\\s+/);\n    }\n  } // Legacy support: allow TokenManager config 'autoRenew' and 'storage' to be defined at top-level\n\n\n  var tokenManager = config.tokenManager;\n  var autoRenew = config.autoRenew || config.auto_renew;\n  var storage = config.storage;\n\n  if (storage || autoRenew) {\n    // Properties already defined within the \"tokenManager\" section will not be overwritten\n    tokenManager = merge({\n      autoRenew: autoRenew,\n      storage: storage\n    }, tokenManager || {});\n  } // Legacy support: allow 'responseType' to be a string or an array\n\n\n  var responseType = config.responseType || config.response_type;\n\n  if (typeof responseType === 'string' && responseType.indexOf(' ') >= 0) {\n    responseType = responseType.split(/\\s+/);\n  }\n\n  var normalizedConfig = merge({}, config, {\n    clientId: config.clientId || config.client_id,\n    redirectUri: config.redirectUri || config.redirect_uri,\n    responseType: responseType,\n    scopes: scopes,\n    tokenManager: tokenManager\n  });\n  return normalizedConfig;\n};\n\nconfigUtil.assertIssuer = function (issuer) {\n  var testing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var copyMessage = 'You can copy your domain from the Okta Developer ' + 'Console. Follow these instructions to find it: ' + findDomainURL;\n\n  if (testing.disableHttpsCheck) {\n    var httpsWarning = 'Warning: HTTPS check is disabled. ' + 'This allows for insecure configurations and is NOT recommended for production use.';\n    /* eslint-disable-next-line no-console */\n\n    console.warn(httpsWarning);\n  }\n\n  if (!issuer) {\n    throw new ConfigurationValidationError('Your Okta URL is missing. ' + copyMessage);\n  } else if (!testing.disableHttpsCheck && !issuer.match(isHttps)) {\n    throw new ConfigurationValidationError('Your Okta URL must start with https. ' + ('Current value: ' + issuer + '. ' + copyMessage));\n  } else if (issuer.match(/{yourOktaDomain}/)) {\n    throw new ConfigurationValidationError('Replace {yourOktaDomain} with your Okta domain. ' + copyMessage);\n  } else if (issuer.match(hasDomainAdmin)) {\n    throw new ConfigurationValidationError('Your Okta domain should not contain -admin. ' + ('Current value: ' + issuer + '. ' + copyMessage));\n  } else if (issuer.match(hasDomainTypo)) {\n    throw new ConfigurationValidationError('It looks like there\\'s a typo in your Okta domain. ' + ('Current value: ' + issuer + '. ' + copyMessage));\n  }\n};\n\nconfigUtil.assertClientId = function (clientId) {\n  if (!clientId) {\n    throw new ConfigurationValidationError('Your client ID is missing. ' + copyCredentialsMessage);\n  } else if (clientId.match(/{clientId}/)) {\n    throw new ConfigurationValidationError('Replace {clientId} with the client ID of your Application. ' + copyCredentialsMessage);\n  }\n};\n\nconfigUtil.assertClientSecret = function (clientSecret) {\n  if (!clientSecret) {\n    throw new ConfigurationValidationError('Your client secret is missing. ' + copyCredentialsMessage);\n  } else if (clientSecret.match(/{clientSecret}/)) {\n    throw new ConfigurationValidationError('Replace {clientSecret} with the client secret of your Application. ' + copyCredentialsMessage);\n  }\n};\n\nconfigUtil.assertRedirectUri = function (redirectUri) {\n  if (!redirectUri) {\n    throw new ConfigurationValidationError('Your redirect URI is missing.');\n  } else if (redirectUri.match(/{redirectUri}/)) {\n    throw new ConfigurationValidationError('Replace {redirectUri} with the redirect URI of your Application.');\n  }\n};\n\nconfigUtil.assertAppBaseUrl = function (appBaseUrl) {\n  if (!appBaseUrl) {\n    throw new ConfigurationValidationError('Your appBaseUrl is missing.');\n  } else if (appBaseUrl.match(/{appBaseUrl}/)) {\n    throw new ConfigurationValidationError('Replace {appBaseUrl} with the base URL of your Application.');\n  } else if (!appBaseUrl.match(hasProtocol)) {\n    throw new ConfigurationValidationError('Your appBaseUrl must contain a protocol (e.g. https://). Current value: ' + appBaseUrl + '.');\n  } else if (appBaseUrl.match(endsInPath)) {\n    throw new ConfigurationValidationError('Your appBaseUrl must not end in a \\'/\\'. Current value: ' + appBaseUrl + '.');\n  }\n};","map":{"version":3,"sources":["/Users/alanboyce/dev/bittap/ui/node_modules/@okta/configuration-validation/dist/lib.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","merge","require","ConfigurationValidationError","_Error","getPrototypeOf","apply","arguments","Error","configUtil","module","exports","findDomainURL","findAppCredentialsURL","copyCredentialsMessage","isHttps","RegExp","hasProtocol","hasDomainAdmin","hasDomainTypo","endsInPath","buildConfigObject","config","scopes","scope","Array","isArray","split","tokenManager","autoRenew","auto_renew","storage","responseType","response_type","indexOf","normalizedConfig","clientId","client_id","redirectUri","redirect_uri","assertIssuer","issuer","testing","length","undefined","copyMessage","disableHttpsCheck","httpsWarning","console","warn","match","assertClientId","assertClientSecret","clientSecret","assertRedirectUri","assertAppBaseUrl","appBaseUrl"],"mappings":"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","sourcesContent":["'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/*!\n * Copyright (c) 2018-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nvar merge = require('lodash/merge');\n\nvar ConfigurationValidationError = function (_Error) {\n  _inherits(ConfigurationValidationError, _Error);\n\n  function ConfigurationValidationError() {\n    _classCallCheck(this, ConfigurationValidationError);\n\n    return _possibleConstructorReturn(this, (ConfigurationValidationError.__proto__ || Object.getPrototypeOf(ConfigurationValidationError)).apply(this, arguments));\n  }\n\n  return ConfigurationValidationError;\n}(Error);\n\nvar configUtil = module.exports;\n\nvar findDomainURL = 'https://bit.ly/finding-okta-domain';\nvar findAppCredentialsURL = 'https://bit.ly/finding-okta-app-credentials';\n\nvar copyCredentialsMessage = 'You can copy it from the Okta Developer Console ' + 'in the details for the Application you created. ' + ('Follow these instructions to find it: ' + findAppCredentialsURL);\n\nvar isHttps = new RegExp('^https://');\nvar hasProtocol = new RegExp('://');\nvar hasDomainAdmin = /-admin.(okta|oktapreview|okta-emea).com/;\nvar hasDomainTypo = new RegExp('(.com.com)|(://.*){2,}');\nvar endsInPath = new RegExp('/$');\n\nconfigUtil.buildConfigObject = function (config) {\n  // See all supported options: https://github.com/okta/okta-auth-js#configuration-reference\n  // Support for parameters with an underscore will be deprecated in a future release\n  // camelCase was added 2/11/2019: https://github.com/okta/okta-oidc-js/commit/9b04ada6a01c9d9aca391abf0de3e5ecc9811e64\n\n  config = config || {}; // accept empty\n\n  // Legacy support: allow a property named 'scope' to be either an array or a string.\n  var scopes = config.scopes;\n  if (!scopes && config.scope) {\n    if (Array.isArray(config.scope)) {\n      scopes = config.scope;\n    } else {\n      scopes = config.scope.split(/\\s+/);\n    }\n  }\n\n  // Legacy support: allow TokenManager config 'autoRenew' and 'storage' to be defined at top-level\n  var tokenManager = config.tokenManager;\n  var autoRenew = config.autoRenew || config.auto_renew;\n  var storage = config.storage;\n  if (storage || autoRenew) {\n    // Properties already defined within the \"tokenManager\" section will not be overwritten\n    tokenManager = merge({\n      autoRenew: autoRenew,\n      storage: storage\n    }, tokenManager || {});\n  }\n\n  // Legacy support: allow 'responseType' to be a string or an array\n  var responseType = config.responseType || config.response_type;\n  if (typeof responseType === 'string' && responseType.indexOf(' ') >= 0) {\n    responseType = responseType.split(/\\s+/);\n  }\n\n  var normalizedConfig = merge({}, config, {\n    clientId: config.clientId || config.client_id,\n    redirectUri: config.redirectUri || config.redirect_uri,\n    responseType: responseType,\n    scopes: scopes,\n    tokenManager: tokenManager\n  });\n\n  return normalizedConfig;\n};\n\nconfigUtil.assertIssuer = function (issuer) {\n  var testing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var copyMessage = 'You can copy your domain from the Okta Developer ' + 'Console. Follow these instructions to find it: ' + findDomainURL;\n\n  if (testing.disableHttpsCheck) {\n    var httpsWarning = 'Warning: HTTPS check is disabled. ' + 'This allows for insecure configurations and is NOT recommended for production use.';\n    /* eslint-disable-next-line no-console */\n    console.warn(httpsWarning);\n  }\n\n  if (!issuer) {\n    throw new ConfigurationValidationError('Your Okta URL is missing. ' + copyMessage);\n  } else if (!testing.disableHttpsCheck && !issuer.match(isHttps)) {\n    throw new ConfigurationValidationError('Your Okta URL must start with https. ' + ('Current value: ' + issuer + '. ' + copyMessage));\n  } else if (issuer.match(/{yourOktaDomain}/)) {\n    throw new ConfigurationValidationError('Replace {yourOktaDomain} with your Okta domain. ' + copyMessage);\n  } else if (issuer.match(hasDomainAdmin)) {\n    throw new ConfigurationValidationError('Your Okta domain should not contain -admin. ' + ('Current value: ' + issuer + '. ' + copyMessage));\n  } else if (issuer.match(hasDomainTypo)) {\n    throw new ConfigurationValidationError('It looks like there\\'s a typo in your Okta domain. ' + ('Current value: ' + issuer + '. ' + copyMessage));\n  }\n};\n\nconfigUtil.assertClientId = function (clientId) {\n  if (!clientId) {\n    throw new ConfigurationValidationError('Your client ID is missing. ' + copyCredentialsMessage);\n  } else if (clientId.match(/{clientId}/)) {\n    throw new ConfigurationValidationError('Replace {clientId} with the client ID of your Application. ' + copyCredentialsMessage);\n  }\n};\n\nconfigUtil.assertClientSecret = function (clientSecret) {\n  if (!clientSecret) {\n    throw new ConfigurationValidationError('Your client secret is missing. ' + copyCredentialsMessage);\n  } else if (clientSecret.match(/{clientSecret}/)) {\n    throw new ConfigurationValidationError('Replace {clientSecret} with the client secret of your Application. ' + copyCredentialsMessage);\n  }\n};\n\nconfigUtil.assertRedirectUri = function (redirectUri) {\n  if (!redirectUri) {\n    throw new ConfigurationValidationError('Your redirect URI is missing.');\n  } else if (redirectUri.match(/{redirectUri}/)) {\n    throw new ConfigurationValidationError('Replace {redirectUri} with the redirect URI of your Application.');\n  }\n};\n\nconfigUtil.assertAppBaseUrl = function (appBaseUrl) {\n  if (!appBaseUrl) {\n    throw new ConfigurationValidationError('Your appBaseUrl is missing.');\n  } else if (appBaseUrl.match(/{appBaseUrl}/)) {\n    throw new ConfigurationValidationError('Replace {appBaseUrl} with the base URL of your Application.');\n  } else if (!appBaseUrl.match(hasProtocol)) {\n    throw new ConfigurationValidationError('Your appBaseUrl must contain a protocol (e.g. https://). Current value: ' + appBaseUrl + '.');\n  } else if (appBaseUrl.match(endsInPath)) {\n    throw new ConfigurationValidationError('Your appBaseUrl must not end in a \\'/\\'. Current value: ' + appBaseUrl + '.');\n  }\n};"]},"metadata":{},"sourceType":"script"}