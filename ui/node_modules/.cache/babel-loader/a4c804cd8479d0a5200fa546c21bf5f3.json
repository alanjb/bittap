{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nvar util = require('./util');\n\nvar http = require('./http');\n\nfunction sessionExists(sdk) {\n  return sdk.session.get().then(function (res) {\n    if (res.status === 'ACTIVE') {\n      return true;\n    }\n\n    return false;\n  }).fail(function () {\n    return false;\n  });\n}\n\nfunction getSession(sdk) {\n  return http.get(sdk, '/api/v1/sessions/me').then(function (session) {\n    var res = util.omit(session, '_links');\n\n    res.refresh = function () {\n      return http.post(sdk, util.getLink(session, 'refresh').href);\n    };\n\n    res.user = function () {\n      return http.get(sdk, util.getLink(session, 'user').href);\n    };\n\n    return res;\n  }).fail(function () {\n    // Return INACTIVE status on failure\n    return {\n      status: 'INACTIVE'\n    };\n  });\n}\n\nfunction closeSession(sdk) {\n  return http.httpRequest(sdk, {\n    url: sdk.options.url + '/api/v1/sessions/me',\n    method: 'DELETE'\n  });\n}\n\nfunction refreshSession(sdk) {\n  return http.post(sdk, '/api/v1/sessions/me/lifecycle/refresh');\n}\n\nfunction setCookieAndRedirect(sdk, sessionToken, redirectUrl) {\n  redirectUrl = redirectUrl || window.location.href;\n  window.location = sdk.options.url + '/login/sessionCookieRedirect' + util.toQueryParams({\n    checkAccountSetupComplete: true,\n    token: sessionToken,\n    redirectUrl: redirectUrl\n  });\n}\n\nmodule.exports = {\n  sessionExists: sessionExists,\n  getSession: getSession,\n  closeSession: closeSession,\n  refreshSession: refreshSession,\n  setCookieAndRedirect: setCookieAndRedirect\n};","map":{"version":3,"sources":["/Users/alanboyce/dev/bittap/ui/node_modules/@okta/okta-auth-js/lib/session.js"],"names":["util","require","http","sessionExists","sdk","session","get","then","res","status","fail","getSession","omit","refresh","post","getLink","href","user","closeSession","httpRequest","url","options","method","refreshSession","setCookieAndRedirect","sessionToken","redirectUrl","window","location","toQueryParams","checkAccountSetupComplete","token","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAaA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAAlB;;AAEA,SAASE,aAAT,CAAuBC,GAAvB,EAA4B;AAC1B,SAAOA,GAAG,CAACC,OAAJ,CAAYC,GAAZ,GACJC,IADI,CACC,UAASC,GAAT,EAAc;AAClB,QAAIA,GAAG,CAACC,MAAJ,KAAe,QAAnB,EAA6B;AAC3B,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,GANI,EAOJC,IAPI,CAOC,YAAW;AACf,WAAO,KAAP;AACD,GATI,CAAP;AAUD;;AAED,SAASC,UAAT,CAAoBP,GAApB,EAAyB;AACvB,SAAOF,IAAI,CAACI,GAAL,CAASF,GAAT,EAAc,qBAAd,EACNG,IADM,CACD,UAASF,OAAT,EAAkB;AACtB,QAAIG,GAAG,GAAGR,IAAI,CAACY,IAAL,CAAUP,OAAV,EAAmB,QAAnB,CAAV;;AAEAG,IAAAA,GAAG,CAACK,OAAJ,GAAc,YAAW;AACvB,aAAOX,IAAI,CAACY,IAAL,CAAUV,GAAV,EAAeJ,IAAI,CAACe,OAAL,CAAaV,OAAb,EAAsB,SAAtB,EAAiCW,IAAhD,CAAP;AACD,KAFD;;AAIAR,IAAAA,GAAG,CAACS,IAAJ,GAAW,YAAW;AACpB,aAAOf,IAAI,CAACI,GAAL,CAASF,GAAT,EAAcJ,IAAI,CAACe,OAAL,CAAaV,OAAb,EAAsB,MAAtB,EAA8BW,IAA5C,CAAP;AACD,KAFD;;AAIA,WAAOR,GAAP;AACD,GAbM,EAcNE,IAdM,CAcD,YAAW;AACf;AACA,WAAO;AAACD,MAAAA,MAAM,EAAE;AAAT,KAAP;AACD,GAjBM,CAAP;AAkBD;;AAED,SAASS,YAAT,CAAsBd,GAAtB,EAA2B;AACzB,SAAOF,IAAI,CAACiB,WAAL,CAAiBf,GAAjB,EAAsB;AAC3BgB,IAAAA,GAAG,EAAEhB,GAAG,CAACiB,OAAJ,CAAYD,GAAZ,GAAkB,qBADI;AAE3BE,IAAAA,MAAM,EAAE;AAFmB,GAAtB,CAAP;AAID;;AAED,SAASC,cAAT,CAAwBnB,GAAxB,EAA6B;AAC3B,SAAOF,IAAI,CAACY,IAAL,CAAUV,GAAV,EAAe,uCAAf,CAAP;AACD;;AAED,SAASoB,oBAAT,CAA8BpB,GAA9B,EAAmCqB,YAAnC,EAAiDC,WAAjD,EAA8D;AAC5DA,EAAAA,WAAW,GAAGA,WAAW,IAAIC,MAAM,CAACC,QAAP,CAAgBZ,IAA7C;AACAW,EAAAA,MAAM,CAACC,QAAP,GAAkBxB,GAAG,CAACiB,OAAJ,CAAYD,GAAZ,GAAkB,8BAAlB,GAChBpB,IAAI,CAAC6B,aAAL,CAAmB;AACjBC,IAAAA,yBAAyB,EAAE,IADV;AAEjBC,IAAAA,KAAK,EAAEN,YAFU;AAGjBC,IAAAA,WAAW,EAAEA;AAHI,GAAnB,CADF;AAMD;;AAEDM,MAAM,CAACC,OAAP,GAAiB;AACf9B,EAAAA,aAAa,EAAEA,aADA;AAEfQ,EAAAA,UAAU,EAAEA,UAFG;AAGfO,EAAAA,YAAY,EAAEA,YAHC;AAIfK,EAAAA,cAAc,EAAEA,cAJD;AAKfC,EAAAA,oBAAoB,EAAEA;AALP,CAAjB","sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\nvar util = require('./util');\nvar http = require('./http');\n\nfunction sessionExists(sdk) {\n  return sdk.session.get()\n    .then(function(res) {\n      if (res.status === 'ACTIVE') {\n        return true;\n      }\n      return false;\n    })\n    .fail(function() {\n      return false;\n    });\n}\n\nfunction getSession(sdk) { \n  return http.get(sdk, '/api/v1/sessions/me')\n  .then(function(session) {\n    var res = util.omit(session, '_links');\n\n    res.refresh = function() {\n      return http.post(sdk, util.getLink(session, 'refresh').href);\n    };\n\n    res.user = function() {\n      return http.get(sdk, util.getLink(session, 'user').href);\n    };\n\n    return res;\n  })\n  .fail(function() {\n    // Return INACTIVE status on failure\n    return {status: 'INACTIVE'};\n  });\n}\n\nfunction closeSession(sdk) {\n  return http.httpRequest(sdk, {\n    url: sdk.options.url + '/api/v1/sessions/me',\n    method: 'DELETE'\n  });\n}\n\nfunction refreshSession(sdk) {\n  return http.post(sdk, '/api/v1/sessions/me/lifecycle/refresh');\n}\n\nfunction setCookieAndRedirect(sdk, sessionToken, redirectUrl) {\n  redirectUrl = redirectUrl || window.location.href;\n  window.location = sdk.options.url + '/login/sessionCookieRedirect' +\n    util.toQueryParams({\n      checkAccountSetupComplete: true,\n      token: sessionToken,\n      redirectUrl: redirectUrl\n    });\n}\n\nmodule.exports = {\n  sessionExists: sessionExists,\n  getSession: getSession,\n  closeSession: closeSession,\n  refreshSession: refreshSession,\n  setCookieAndRedirect: setCookieAndRedirect\n};\n"]},"metadata":{},"sourceType":"script"}