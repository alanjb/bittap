{"ast":null,"code":"/*!\n * Copyright (c) 2019-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\n/* eslint-disable complexity, max-statements */\nvar AuthSdkError = require('./errors/AuthSdkError');\n\nvar http = require('./http');\n\nvar util = require('./util'); // Code verifier: Random URL-safe string with a minimum length of 43 characters.\n// Code challenge: Base64 URL-encoded SHA-256 hash of the code verifier.\n\n\nvar MIN_VERIFIER_LENGTH = 43;\nvar MAX_VERIFIER_LENGTH = 128;\nvar DEFAULT_CODE_CHALLENGE_METHOD = 'S256';\n\nfunction dec2hex(dec) {\n  return ('0' + dec.toString(16)).substr(-2);\n}\n\nfunction getRandomString(length) {\n  var a = new Uint8Array(Math.ceil(length / 2));\n  crypto.getRandomValues(a);\n  var str = Array.from(a, dec2hex).join('');\n  return str.slice(0, length);\n}\n\nfunction generateVerifier(prefix) {\n  var verifier = prefix || '';\n\n  if (verifier.length < MIN_VERIFIER_LENGTH) {\n    verifier = verifier + getRandomString(MIN_VERIFIER_LENGTH - verifier.length);\n  }\n\n  return encodeURIComponent(verifier).slice(0, MAX_VERIFIER_LENGTH);\n}\n\nfunction saveMeta(sdk, meta) {\n  var storage = sdk.options.storageUtil.getPKCEStorage();\n  storage.setStorage(meta);\n}\n\nfunction loadMeta(sdk) {\n  var storage = sdk.options.storageUtil.getPKCEStorage();\n  var obj = storage.getStorage();\n  return obj;\n}\n\nfunction clearMeta(sdk) {\n  var storage = sdk.options.storageUtil.getPKCEStorage();\n  storage.clearStorage();\n}\n/* global Uint8Array, TextEncoder */\n\n\nfunction computeChallenge(str) {\n  var buffer = new TextEncoder().encode(str);\n  return crypto.subtle.digest('SHA-256', buffer).then(function (arrayBuffer) {\n    var hash = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));\n    var b64u = util.stringToBase64Url(hash); // url-safe base64 variant\n\n    return b64u;\n  });\n}\n\nfunction validateOptions(oauthOptions) {\n  // Quick validation\n  if (!oauthOptions.clientId) {\n    throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to get a token');\n  }\n\n  if (!oauthOptions.redirectUri) {\n    throw new AuthSdkError('The redirectUri passed to /authorize must also be passed to /token');\n  }\n\n  if (!oauthOptions.authorizationCode) {\n    throw new AuthSdkError('An authorization code (returned from /authorize) must be passed to /token');\n  }\n\n  if (!oauthOptions.codeVerifier) {\n    throw new AuthSdkError('The \"codeVerifier\" (generated and saved by your app) must be passed to /token');\n  }\n}\n\nfunction getPostData(options) {\n  // Convert options to OAuth params\n  var params = util.removeNils({\n    'client_id': options.clientId,\n    'redirect_uri': options.redirectUri,\n    'grant_type': 'authorization_code',\n    'code': options.authorizationCode,\n    'code_verifier': options.codeVerifier\n  }); // Encode as URL string\n\n  return util.toQueryParams(params).slice(1);\n} // exchange authorization code for an access token\n\n\nfunction getToken(sdk, oauthOptions, urls) {\n  validateOptions(oauthOptions);\n  var data = getPostData(oauthOptions);\n  return http.httpRequest(sdk, {\n    url: urls.tokenUrl,\n    method: 'POST',\n    args: data,\n    withCredentials: false,\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  });\n}\n\nmodule.exports = {\n  DEFAULT_CODE_CHALLENGE_METHOD: DEFAULT_CODE_CHALLENGE_METHOD,\n  generateVerifier: generateVerifier,\n  clearMeta: clearMeta,\n  saveMeta: saveMeta,\n  loadMeta: loadMeta,\n  computeChallenge: computeChallenge,\n  getToken: getToken\n};","map":{"version":3,"sources":["/app/node_modules/@okta/okta-auth-js/lib/pkce.js"],"names":["AuthSdkError","require","http","util","MIN_VERIFIER_LENGTH","MAX_VERIFIER_LENGTH","DEFAULT_CODE_CHALLENGE_METHOD","dec2hex","dec","toString","substr","getRandomString","length","a","Uint8Array","Math","ceil","crypto","getRandomValues","str","Array","from","join","slice","generateVerifier","prefix","verifier","encodeURIComponent","saveMeta","sdk","meta","storage","options","storageUtil","getPKCEStorage","setStorage","loadMeta","obj","getStorage","clearMeta","clearStorage","computeChallenge","buffer","TextEncoder","encode","subtle","digest","then","arrayBuffer","hash","String","fromCharCode","apply","b64u","stringToBase64Url","validateOptions","oauthOptions","clientId","redirectUri","authorizationCode","codeVerifier","getPostData","params","removeNils","toQueryParams","getToken","urls","data","httpRequest","url","tokenUrl","method","args","withCredentials","headers","module","exports"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2019-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\n /* eslint-disable complexity, max-statements */\nvar AuthSdkError  = require('./errors/AuthSdkError');\nvar http          = require('./http');\nvar util          = require('./util');\n\n// Code verifier: Random URL-safe string with a minimum length of 43 characters.\n// Code challenge: Base64 URL-encoded SHA-256 hash of the code verifier.\nvar MIN_VERIFIER_LENGTH = 43;\nvar MAX_VERIFIER_LENGTH = 128;\nvar DEFAULT_CODE_CHALLENGE_METHOD = 'S256';\n\nfunction dec2hex (dec) {\n  return ('0' + dec.toString(16)).substr(-2);\n}\n\nfunction getRandomString(length) {\n  var a = new Uint8Array(Math.ceil(length / 2));\n  crypto.getRandomValues(a);\n  var str = Array.from(a, dec2hex).join('');\n  return str.slice(0, length);\n}\n\nfunction generateVerifier(prefix) {\n  var verifier = prefix || '';\n  if (verifier.length < MIN_VERIFIER_LENGTH) {\n    verifier = verifier + getRandomString(MIN_VERIFIER_LENGTH - verifier.length);\n  }\n  return encodeURIComponent(verifier).slice(0, MAX_VERIFIER_LENGTH);\n}\n\nfunction saveMeta(sdk, meta) {\n  var storage = sdk.options.storageUtil.getPKCEStorage();\n  storage.setStorage(meta);\n}\n\nfunction loadMeta(sdk) {\n  var storage = sdk.options.storageUtil.getPKCEStorage();\n  var obj = storage.getStorage();\n  return obj;\n}\n\nfunction clearMeta(sdk) {\n  var storage = sdk.options.storageUtil.getPKCEStorage();\n  storage.clearStorage();\n}\n\n/* global Uint8Array, TextEncoder */\nfunction computeChallenge(str) {  \n  var buffer = new TextEncoder().encode(str);\n  return crypto.subtle.digest('SHA-256', buffer).then(function(arrayBuffer) {\n    var hash = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));\n    var b64u = util.stringToBase64Url(hash); // url-safe base64 variant\n    return b64u;\n  });\n}\n\n\nfunction validateOptions(oauthOptions) {\n  // Quick validation\n  if (!oauthOptions.clientId) {\n    throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to get a token');\n  }\n\n  if (!oauthOptions.redirectUri) {\n    throw new AuthSdkError('The redirectUri passed to /authorize must also be passed to /token');\n  }\n\n  if (!oauthOptions.authorizationCode) {\n    throw new AuthSdkError('An authorization code (returned from /authorize) must be passed to /token');\n  }\n\n  if (!oauthOptions.codeVerifier) {\n    throw new AuthSdkError('The \"codeVerifier\" (generated and saved by your app) must be passed to /token');\n  }\n}\n\nfunction getPostData(options) {\n  // Convert options to OAuth params\n  var params = util.removeNils({\n    'client_id': options.clientId,\n    'redirect_uri': options.redirectUri,\n    'grant_type': 'authorization_code',\n    'code': options.authorizationCode,\n    'code_verifier': options.codeVerifier\n  });\n  // Encode as URL string\n  return util.toQueryParams(params).slice(1);\n}\n\n// exchange authorization code for an access token\nfunction getToken(sdk, oauthOptions, urls) {\n  validateOptions(oauthOptions);\n  var data = getPostData(oauthOptions);\n\n  return http.httpRequest(sdk, {\n    url: urls.tokenUrl,\n    method: 'POST',\n    args: data,\n    withCredentials: false,\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  });\n}\n\nmodule.exports = {\n  DEFAULT_CODE_CHALLENGE_METHOD: DEFAULT_CODE_CHALLENGE_METHOD,\n  generateVerifier: generateVerifier,\n  clearMeta: clearMeta,\n  saveMeta: saveMeta,\n  loadMeta: loadMeta,\n  computeChallenge: computeChallenge,\n  getToken: getToken\n};\n"]},"metadata":{},"sourceType":"script"}