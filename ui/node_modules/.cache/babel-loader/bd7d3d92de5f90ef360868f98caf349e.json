{"ast":null,"code":";\n\n(function () {\n  var object = typeof exports != 'undefined' ? exports : this; // #8: web workers\n\n  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n  function InvalidCharacterError(message) {\n    this.message = message;\n  }\n\n  InvalidCharacterError.prototype = new Error();\n  InvalidCharacterError.prototype.name = 'InvalidCharacterError'; // encoder\n  // [https://gist.github.com/999166] by [https://github.com/nignag]\n\n  object.btoa || (object.btoa = function (input) {\n    var str = String(input);\n\n    for ( // initialize result and counter\n    var block, charCode, idx = 0, map = chars, output = ''; // if the next str index does not exist:\n    //   change the mapping table to \"=\"\n    //   check if d has no fractional digits\n    str.charAt(idx | 0) || (map = '=', idx % 1); // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n    output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {\n      charCode = str.charCodeAt(idx += 3 / 4);\n\n      if (charCode > 0xFF) {\n        throw new InvalidCharacterError(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n      }\n\n      block = block << 8 | charCode;\n    }\n\n    return output;\n  }); // decoder\n  // [https://gist.github.com/1020396] by [https://github.com/atk]\n\n  object.atob || (object.atob = function (input) {\n    var str = String(input).replace(/=+$/, '');\n\n    if (str.length % 4 == 1) {\n      throw new InvalidCharacterError(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    }\n\n    for ( // initialize result and counters\n    var bc = 0, bs, buffer, idx = 0, output = ''; // get next character\n    buffer = str.charAt(idx++); // character found in table? initialize bit storage and add its ascii value;\n    ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, // and if not first of each 4 characters,\n    // convert the first 8 bits to one ascii character\n    bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n      // try to find character in table (0-63, not found => -1)\n      buffer = chars.indexOf(buffer);\n    }\n\n    return output;\n  });\n})();","map":{"version":3,"sources":["/Users/alanboyce/dev/bittap/ui/node_modules/Base64/base64.js"],"names":["object","exports","chars","InvalidCharacterError","message","prototype","Error","name","btoa","input","str","String","block","charCode","idx","map","output","charAt","charCodeAt","atob","replace","length","bc","bs","buffer","fromCharCode","indexOf"],"mappings":"AAAA;;AAAE,aAAY;AAEZ,MAAIA,MAAM,GAAG,OAAOC,OAAP,IAAkB,WAAlB,GAAgCA,OAAhC,GAA0C,IAAvD,CAFY,CAEiD;;AAC7D,MAAIC,KAAK,GAAG,mEAAZ;;AAEA,WAASC,qBAAT,CAA+BC,OAA/B,EAAwC;AACtC,SAAKA,OAAL,GAAeA,OAAf;AACD;;AACDD,EAAAA,qBAAqB,CAACE,SAAtB,GAAkC,IAAIC,KAAJ,EAAlC;AACAH,EAAAA,qBAAqB,CAACE,SAAtB,CAAgCE,IAAhC,GAAuC,uBAAvC,CATY,CAWZ;AACA;;AACAP,EAAAA,MAAM,CAACQ,IAAP,KACAR,MAAM,CAACQ,IAAP,GAAc,UAAUC,KAAV,EAAiB;AAC7B,QAAIC,GAAG,GAAGC,MAAM,CAACF,KAAD,CAAhB;;AACA,UACE;AACA,QAAIG,KAAJ,EAAWC,QAAX,EAAqBC,GAAG,GAAG,CAA3B,EAA8BC,GAAG,GAAGb,KAApC,EAA2Cc,MAAM,GAAG,EAFtD,EAGE;AACA;AACA;AACAN,IAAAA,GAAG,CAACO,MAAJ,CAAWH,GAAG,GAAG,CAAjB,MAAwBC,GAAG,GAAG,GAAN,EAAWD,GAAG,GAAG,CAAzC,CANF,EAOE;AACAE,IAAAA,MAAM,IAAID,GAAG,CAACE,MAAJ,CAAW,KAAKL,KAAK,IAAI,IAAIE,GAAG,GAAG,CAAN,GAAU,CAAvC,CARZ,EASE;AACAD,MAAAA,QAAQ,GAAGH,GAAG,CAACQ,UAAJ,CAAeJ,GAAG,IAAI,IAAE,CAAxB,CAAX;;AACA,UAAID,QAAQ,GAAG,IAAf,EAAqB;AACnB,cAAM,IAAIV,qBAAJ,CAA0B,0FAA1B,CAAN;AACD;;AACDS,MAAAA,KAAK,GAAGA,KAAK,IAAI,CAAT,GAAaC,QAArB;AACD;;AACD,WAAOG,MAAP;AACD,GApBD,EAbY,CAmCZ;AACA;;AACAhB,EAAAA,MAAM,CAACmB,IAAP,KACAnB,MAAM,CAACmB,IAAP,GAAc,UAAUV,KAAV,EAAiB;AAC7B,QAAIC,GAAG,GAAGC,MAAM,CAACF,KAAD,CAAN,CAAcW,OAAd,CAAsB,KAAtB,EAA6B,EAA7B,CAAV;;AACA,QAAIV,GAAG,CAACW,MAAJ,GAAa,CAAb,IAAkB,CAAtB,EAAyB;AACvB,YAAM,IAAIlB,qBAAJ,CAA0B,mEAA1B,CAAN;AACD;;AACD,UACE;AACA,QAAImB,EAAE,GAAG,CAAT,EAAYC,EAAZ,EAAgBC,MAAhB,EAAwBV,GAAG,GAAG,CAA9B,EAAiCE,MAAM,GAAG,EAF5C,EAGE;AACAQ,IAAAA,MAAM,GAAGd,GAAG,CAACO,MAAJ,CAAWH,GAAG,EAAd,CAJX,EAKE;AACA,KAACU,MAAD,KAAYD,EAAE,GAAGD,EAAE,GAAG,CAAL,GAASC,EAAE,GAAG,EAAL,GAAUC,MAAnB,GAA4BA,MAAjC,EACV;AACA;AACAF,IAAAA,EAAE,KAAK,CAHT,IAGcN,MAAM,IAAIL,MAAM,CAACc,YAAP,CAAoB,MAAMF,EAAE,KAAK,CAAC,CAAD,GAAKD,EAAL,GAAU,CAAf,CAA5B,CAHxB,GAGyE,CAT3E,EAUE;AACA;AACAE,MAAAA,MAAM,GAAGtB,KAAK,CAACwB,OAAN,CAAcF,MAAd,CAAT;AACD;;AACD,WAAOR,MAAP;AACD,GArBD;AAuBD,CA5DC,GAAD","sourcesContent":[";(function () {\n\n  var object = typeof exports != 'undefined' ? exports : this; // #8: web workers\n  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n  function InvalidCharacterError(message) {\n    this.message = message;\n  }\n  InvalidCharacterError.prototype = new Error;\n  InvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\n  // encoder\n  // [https://gist.github.com/999166] by [https://github.com/nignag]\n  object.btoa || (\n  object.btoa = function (input) {\n    var str = String(input);\n    for (\n      // initialize result and counter\n      var block, charCode, idx = 0, map = chars, output = '';\n      // if the next str index does not exist:\n      //   change the mapping table to \"=\"\n      //   check if d has no fractional digits\n      str.charAt(idx | 0) || (map = '=', idx % 1);\n      // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n      output += map.charAt(63 & block >> 8 - idx % 1 * 8)\n    ) {\n      charCode = str.charCodeAt(idx += 3/4);\n      if (charCode > 0xFF) {\n        throw new InvalidCharacterError(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n      }\n      block = block << 8 | charCode;\n    }\n    return output;\n  });\n\n  // decoder\n  // [https://gist.github.com/1020396] by [https://github.com/atk]\n  object.atob || (\n  object.atob = function (input) {\n    var str = String(input).replace(/=+$/, '');\n    if (str.length % 4 == 1) {\n      throw new InvalidCharacterError(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    }\n    for (\n      // initialize result and counters\n      var bc = 0, bs, buffer, idx = 0, output = '';\n      // get next character\n      buffer = str.charAt(idx++);\n      // character found in table? initialize bit storage and add its ascii value;\n      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n        // and if not first of each 4 characters,\n        // convert the first 8 bits to one ascii character\n        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n    ) {\n      // try to find character in table (0-63, not found => -1)\n      buffer = chars.indexOf(buffer);\n    }\n    return output;\n  });\n\n}());\n"]},"metadata":{},"sourceType":"script"}